[{"/Users/andrea/tendr/tendr-react-frontend/src/Containers/AllCocktails.js":"1","/Users/andrea/tendr/tendr-react-frontend/src/Components/TendrHeader.js":"2","/Users/andrea/tendr/tendr-react-frontend/src/Containers/MyIngrContainer.js":"3","/Users/andrea/tendr/tendr-react-frontend/src/Components/SavedCocktailItem.js":"4","/Users/andrea/tendr/tendr-react-frontend/src/Containers/MyCocktailsCont.js":"5","/Users/andrea/tendr/tendr-react-frontend/src/Components/Cocktail.js":"6","/Users/andrea/tendr/tendr-react-frontend/src/index.js":"7","/Users/andrea/tendr/tendr-react-frontend/src/Redux/rootReducer.js":"8","/Users/andrea/tendr/tendr-react-frontend/src/Components/Footer.js":"9","/Users/andrea/tendr/tendr-react-frontend/src/Containers/MainContainer.js":"10","/Users/andrea/tendr/tendr-react-frontend/src/Containers/ShoppingListCont.js":"11","/Users/andrea/tendr/tendr-react-frontend/src/Containers/SavedCocktailsCont.js":"12","/Users/andrea/tendr/tendr-react-frontend/src/Components/CocktailItem.js":"13","/Users/andrea/tendr/tendr-react-frontend/src/Components/ShoppingListItem.js":"14","/Users/andrea/tendr/tendr-react-frontend/src/Components/FilterCocktails.js":"15","/Users/andrea/tendr/tendr-react-frontend/src/reportWebVitals.js":"16","/Users/andrea/tendr/tendr-react-frontend/src/Components/Header.js":"17","/Users/andrea/tendr/tendr-react-frontend/src/Containers/AllIngContainer.js":"18","/Users/andrea/tendr/tendr-react-frontend/src/Components/LogInForm.js":"19","/Users/andrea/tendr/tendr-react-frontend/src/Components/Ingredient.js":"20"},{"size":4206,"mtime":1611792996000,"results":"21","hashOfConfig":"22"},{"size":2361,"mtime":1611792903000,"results":"23","hashOfConfig":"22"},{"size":2318,"mtime":1611774203000,"results":"24","hashOfConfig":"22"},{"size":12501,"mtime":1611774366000,"results":"25","hashOfConfig":"22"},{"size":2101,"mtime":1611791618000,"results":"26","hashOfConfig":"22"},{"size":4242,"mtime":1610311021000,"results":"27","hashOfConfig":"22"},{"size":864,"mtime":1608511277000,"results":"28","hashOfConfig":"22"},{"size":3995,"mtime":1609864824000,"results":"29","hashOfConfig":"22"},{"size":318,"mtime":1611691785000,"results":"30","hashOfConfig":"22"},{"size":1844,"mtime":1611700247000,"results":"31","hashOfConfig":"22"},{"size":1393,"mtime":1610311023000,"results":"32","hashOfConfig":"22"},{"size":1602,"mtime":1610311023000,"results":"33","hashOfConfig":"22"},{"size":7963,"mtime":1611691961000,"results":"34","hashOfConfig":"22"},{"size":1734,"mtime":1610311022000,"results":"35","hashOfConfig":"22"},{"size":1404,"mtime":1611686673000,"results":"36","hashOfConfig":"22"},{"size":362,"mtime":1607978006000,"results":"37","hashOfConfig":"22"},{"size":993,"mtime":1611676530000,"results":"38","hashOfConfig":"22"},{"size":4569,"mtime":1611695139000,"results":"39","hashOfConfig":"22"},{"size":1750,"mtime":1610311022000,"results":"40","hashOfConfig":"22"},{"size":2862,"mtime":1610311021000,"results":"41","hashOfConfig":"22"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"1wjrw23",{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"52"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"55","messages":"56","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"63","messages":"64","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"70","messages":"71","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"67"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"75","messages":"76","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"79","messages":"80","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"81","messages":"82","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/andrea/tendr/tendr-react-frontend/src/Containers/AllCocktails.js",["87","88","89"],"/Users/andrea/tendr/tendr-react-frontend/src/Components/TendrHeader.js",[],"/Users/andrea/tendr/tendr-react-frontend/src/Containers/MyIngrContainer.js",["90"],"import React, { Component } from 'react';\nimport { withRouter } from 'react-router-dom';\nimport {Segment, Container, Card} from 'semantic-ui-react'\nimport UserIngredient from '../Components/UserIngredient';\nimport { connect } from 'react-redux'\nimport {getUserIngredients, getCocktails} from '../Redux/actions'\n\nclass MyIngrContainer extends Component {\n\n      componentDidMount() {\n        this.props.fetchUserIngredients()\n        this.props.fetchCocktails()\n        // debugger\n      }\n        \n        renderMyIngredients = () => {\n            let filtered = this.props.userIngApi.filter(ingredient => ingredient.user_id === this.props.currentUser.user.id)\n            let sorted = filtered.sort((a, b) => this.cocktailCount(b) -this.cocktailCount(a))\n            return sorted.map(ingObj => <UserIngredient cocktailCount={this.cocktailCount(ingObj)} key={ingObj.id} ingredient={ingObj} id={ingObj.id} category={ingObj.category} name={ingObj.name} image_url={ingObj.image_url} />)\n        }\n\n        cocktailCount = (ingredient) => {\n            let cocktailMap = this.props.cocktailsApi.map(cock => cock.cocktail_ingredients)\n            let cocktIngs = cocktailMap.map(obj => obj.map(newObj => newObj.name))\n            let totalCocktails = cocktIngs.filter(obj => obj.includes(ingredient.name))\n            return totalCocktails.length\n          }\n        \n        render() {\n            return (\n                <> {this.props.userIngApi.length ?                 \n                <Container>\n                    <Segment textAlign='center' basic padded='very' vertical>\n                        <h2>Current Ingredients</h2>\n                        <Card.Group centered>\n                        {this.renderMyIngredients()}\n                        </Card.Group>\n                    </Segment>\n                </Container>\n                    : <h2>loading</h2>\n                    }\n                </>\n            );\n        }\n}\n\nfunction mdp(dispatch){\n    return {\n        fetchUserIngredients: () => dispatch(getUserIngredients()),\n        fetchCocktails: () => dispatch(getCocktails())\n    }\n}\nfunction msp(state){\n    return {\n        currentUser: state.currentUser,\n        userIngApi: state.userIngApi,\n        cocktailsApi: state.cocktailsApi\n    }\n}\n\nexport default connect(msp, mdp)(MyIngrContainer)\n\n","/Users/andrea/tendr/tendr-react-frontend/src/Components/SavedCocktailItem.js",["91","92"],"import React, { Component } from 'react';\nimport { Button, Icon, Item, Label, List, Form, Modal, Card, Image, Grid, Segment} from 'semantic-ui-react'\nimport { connect } from 'react-redux'\nimport { getCocktails, getUserIngredients, addToShoppingList, getIngredients, addNote, getSavedCocktails, deleteSavedCocktail, getShoppingList } from '../Redux/actions'\n\nclass SavedCocktailItem extends Component {\n\n    state = {\n        notes: \"\",\n        clicked: false,\n        open: false\n    }\n\n    toggleHandler = () => {\n        this.setState({\n          clicked: !this.state.clicked,\n        })\n      }\n    \n      toggleModal = () => {\n        this.setState({\n          open: !this.state.open,\n        })\n      }\n\n    changeHandler = (e) => {\n        this.setState({ [e.target.name]: e.target.value })\n    }\n\n    componentDidMount() {\n        this.props.fetchSavedCocktails()\n        this.props.fetchIngredients()\n        this.props.fetchUserIngs()\n        this.props.fetchShoppingList()\n        this.setState({ clicked: false, open: false})\n        console.log(\"saved cocktail render props:\", this.props)\n    }\n\n    localSaveHandler = (e) => {\n        e.preventDefault()\n        this.props.localSaveHandler( this.props.savedCocktail.cocktail_id, this.props.currentUser.user.id)\n        console.log(\"hello?\")\n    }\n\n    localDeleteHandler = () => {\n        this.props.localDeleteHandler(this.props.id)\n    }\n\n    localNoteHandler = (e) => {\n        e.preventDefault()\n        let currentNotes = this.props.savedCocktail.notes\n        let newNotes = [...currentNotes, this.state.notes]\n        const updateObj = {\n            id: this.props.id,\n            user_id: this.props.savedCocktail.user_id,\n            cocktail_id: this.props.savedCocktail.cocktail_id,\n            notes: newNotes,\n            user: this.props.savedCocktail.user,\n            cocktail: this.props.savedCocktail.cocktail\n        }\n        this.props.addNewNote(updateObj)\n        e.target.reset()\n    }\n    \n    ingredientCheck = (name) => {\n        let ingNames = this.props.userIngApi.map(ingredient => ingredient.name)\n        let shoppingNames = this.props.shoppingListApi.map(ing => ing.ingredient.name)\n        if(ingNames.includes(name)) {\n            return <Icon color='green' size='big' name='check circle' />\n        }else if(shoppingNames.includes(name)){\n            return <Icon color='blue' size='big' name='shopping cart'/>\n        }else{\n            return <Icon color='red' size='big' name='exclamation circle' />\n        }\n    }\n\n    howManyIngs = (cocktailObj) => {\n        let cocktail = cocktailObj.cocktail_ingredients\n        let ingNames = this.props.userIngApi.map(ingredient => ingredient.name)\n        let hasThis = cocktail.filter((ing) => ingNames.includes(ing.name))\n        let missingIngCount = cocktail.length - hasThis.length\n        if(missingIngCount >= 1){\n            return `You are missing ${missingIngCount} ingredients `\n        } else {\n            return 'You have all the Ingredients!'\n        }\n    }\n\n    renderIngTable = () => {\n        let cocktIngs = this.props.cocktail.cocktail_ingredients\n        return cocktIngs.map((ingredient, index) => {\n            const { name, unit, quantity } = ingredient\n            return(\n                <List.Item floated='left'>\n                    <List.Content floated='left'>\n                        {this.ingredientCheck(name)} {quantity} {unit} {name} \n                    </List.Content>\n                </List.Item>\n            )\n        })\n    }\n\n    render() {\n        // const { savedCocktail } = this.props.savedCocktail\n        return (\n            <Card>\n                <Image className='cocktail-image' bordered src={this.props.savedCocktail.cocktail.image_url}/>\n                <Card.Content>\n                    {this.props.savedCocktail.cocktail.name}\n                </Card.Content>\n                <Card.Content extra>\n                <Modal className='cocktail-modal'\n                            size='large'\n                            closeIcon\n                            onClose={() => this.toggleModal()}\n                            onOpen={() => this.toggleModal()}\n                            open={this.state.open}\n                            trigger={\n                                <Button\n                                content='Learn More'\n                                positive\n                                onClick={() => {\n                                    this.toggleModal();\n                                }}\n                                />\n                            }>\n                            <Modal.Header className='modal-header' textAlign='center' >\n                                <h3>{this.props.savedCocktail.cocktail.name}</h3>\n                            </Modal.Header>\n                                <Segment>\n                                    <Grid columns={4} stackable>\n                                        <Grid.Column className='modal-image-column' width={7} >\n                                            <Image src={this.props.savedCocktail.cocktail.image_url} alt={this.props.savedCocktail.cocktail.name} size='large' rounded floated='left' />\n                                        </Grid.Column>\n                                        <Grid.Column className='cocktail-column' width={3}>\n                                            <List relaxed  verticalAlign='left'>\n                                                <List.Item><strong>Category:</strong> {this.props.savedCocktail.cocktail.category}</List.Item>\n                                                <List.Item><strong>Glass:</strong>{this.props.savedCocktail.cocktail.recommended_glass}</List.Item>\n                                                <List.Item><strong>Ice:</strong>{this.props.savedCocktail.cocktail.recommended_ice}</List.Item>\n                                                <List.Item><strong>Garnish:</strong>{this.props.savedCocktail.cocktail.garnish}</List.Item>\n                                            </List>\n                                            <List relaxed bulleted floated='left' verticalAlign='bottom'>\n                                                <List.Header><strong>Recipe</strong></List.Header>\n                                                {this.props.savedCocktail.cocktail.instructions.map(element => <List.Item floated='left'><List.Content floated='left'>{element}</List.Content></List.Item>)}\n                                            </List>\n                                            {/* <Label>Category: {cocktail.category}</Label>\n                                            <Label>{this.howManyIngs(this.props.cocktail)}</Label> */}\n                                        </Grid.Column>\n                                        <Grid.Column className='cocktail-column' width={3}>\n            \n                                            <List animated relaxed='very' verticalAlign='left'>\n                                                <List.Header textAlign='center'>{this.howManyIngs(this.props.cocktail)}</List.Header>\n                                                {this.renderIngTable()}\n                                            </List>\n\n                                        </Grid.Column > \n                                        <Grid.Column className='cocktail-column' width={3}>\n                                            <List verticalAlign='middle' bulleted floated='right'>\n                                                <List.Header>My Notes</List.Header>\n                                                {this.props.savedCocktail.notes.map(element => <List.Item floated='left'><List.Content floated='left'>{element}</List.Content></List.Item>)}\n                                            </List>     \n                                            <Form onSubmit={this.localNoteHandler}>\n                                                <Form.Field>\n                                                    <label>Notes</label>\n                                                    <input type='text' name='notes' value={this.state.notes} onChange={this.changeHandler} placeholder='your notes' />\n                                                </Form.Field>\n                                                <Button type='submit'>Add Note</Button>\n                                            </Form>                                                                                   \n                                        </Grid.Column>\n                                    </Grid>\n                                </Segment>\n                            {/* </Modal.Content> */}\n                            \n                            {/* <Modal.Actions>\n                                <Button color=\"red\" onClick={() => this.toggleModal()}>Exit</Button>\n                            </Modal.Actions> */}\n                        </Modal>\n                    <Button negative color='red' onClick={this.localDeleteHandler} content='Remove' />\n                </Card.Content>\n            </Card>\n            // <Item padded='very'>\n            //     <Item.Image rounded size='large' floated='left' src={this.props.savedCocktail.cocktail.image_url} />\n            //     <Item.Content floated='left'>\n            //         <Item.Header className='cocktail-item-header' floated='left'><h1>{this.props.savedCocktail.cocktail.name}</h1></Item.Header>\n            //         <Item.Meta>{this.props.savedCocktail.cocktail.category}</Item.Meta>\n            //         <Item.Description>{this.howManyIngs(this.props.savedCocktail.cocktail)}</Item.Description>\n            //         <List animated verticalAlign='middle'>\n            //             {/* <List.Header floated='left'>Ingredients</List.Header> */}\n            //             {this.renderIngTable()}\n            //         </List>\n            //         <Item.Description>Glass: {this.props.savedCocktail.cocktail.recommended_glass} </Item.Description>\n            //         <Item.Description>Ice: {this.props.savedCocktail.cocktail.recommended_ice} </Item.Description>\n            //         <List ordered floated='left'>\n            //             <List.Header floated='left'>Instructions</List.Header>\n            //             {this.props.savedCocktail.cocktail.instructions.map(element => <List.Item floated='left'><List.Content floated='left'>{element}</List.Content></List.Item>)}\n            //         </List>\n            //     </Item.Content>\n            //     <Item.Content floated='right'>\n                    // <List verticalAlign='middle' bulleted floated='right'>\n                    //     <List.Header>My Notes</List.Header>\n                    //     {this.props.savedCocktail.notes.map(element => <List.Item floated='left'><List.Content floated='left'>{element}</List.Content></List.Item>)}\n                    // </List>\n                    // <Form onSubmit={this.localNoteHandler}>\n                    //     <Form.Field>\n                    //         <label>Notes</label>\n                    //         <input type='text' name='notes' value={this.state.notes} onChange={this.changeHandler} placeholder='your notes' />\n                    //     </Form.Field>\n                    //     <Button type='submit'>Add Note</Button>\n                    // </Form>\n                        \n            //         <Button verticalAlign='bottom' onClick={this.localDeleteHandler}>Remove From Saved Cocktails</Button>\n            //     </Item.Content>\n            // </Item>\n        );\n    }\n}\nfunction mdp(dispatch){\n    return{\n        fetchIngredients: () => dispatch(getIngredients()),\n        fetchCocktails: () => dispatch(getCocktails()),\n        fetchUserIngs: () => dispatch(getUserIngredients()),\n        localListHandler: (ingredient) => dispatch(addToShoppingList(ingredient)),\n        fetchSavedCocktails: () => dispatch(getSavedCocktails()),\n        addNewNote: (updateObj) => dispatch(addNote(updateObj)),\n        localDeleteHandler: (id) => dispatch(deleteSavedCocktail(id)),\n        localSaveHandler: (ingredient) => dispatch(addToShoppingList(ingredient)),\n        fetchShoppingList: () => dispatch(getShoppingList()) \n    }\n}\n\nfunction msp(state){\n    return {\n        currentUser: state.currentUser,\n        userIngApi: state.userIngApi,\n        cocktailsApi: state.cocktailsApi,\n        savedCocktails: state.savedCocktails,\n        shoppingListApi: state.shoppingListApi\n    }\n}\n\nexport default connect(msp, mdp)(SavedCocktailItem);",["93","94"],"/Users/andrea/tendr/tendr-react-frontend/src/Containers/MyCocktailsCont.js",["95"],"/Users/andrea/tendr/tendr-react-frontend/src/Components/Cocktail.js",["96","97","98"],"/Users/andrea/tendr/tendr-react-frontend/src/index.js",[],"/Users/andrea/tendr/tendr-react-frontend/src/Redux/rootReducer.js",[],"/Users/andrea/tendr/tendr-react-frontend/src/Components/Footer.js",[],"/Users/andrea/tendr/tendr-react-frontend/src/Containers/MainContainer.js",["99"],"/Users/andrea/tendr/tendr-react-frontend/src/Containers/ShoppingListCont.js",[],["100","101"],"/Users/andrea/tendr/tendr-react-frontend/src/Containers/SavedCocktailsCont.js",["102"],"/Users/andrea/tendr/tendr-react-frontend/src/Components/CocktailItem.js",["103","104","105"],"import React, { Component } from 'react';\nimport { Button, Icon, Image, Item, Label, List, Modal, Segment, Grid, Divider, Card} from 'semantic-ui-react'\nimport { connect } from 'react-redux'\nimport { getCocktails, getUserIngredients, addToShoppingList, getIngredients, saveCocktail, getShoppingList } from '../Redux/actions'\n\nclass CocktailItem extends Component {\n\n    state = {\n        clicked: false,\n        open: false\n      }\n    \n      toggleHandler = () => {\n        this.setState({\n          clicked: !this.state.clicked,\n        })\n      }\n    \n      toggleModal = () => {\n        this.setState({\n          open: !this.state.open,\n        })\n      }\n\n    componentDidMount() {\n        this.props.fetchIngredients()\n        this.props.fetchUserIngs()\n        this.props.fetchShoppingList()\n        // console.log(this.props.currentUser)\n        this.setState({ clicked: false, open: false})\n        // debugger\n    }\n\n\n    localSaveHandler = (e) => {\n        e.preventDefault()\n        this.props.localSaveHandler( this.props.cocktail.id, this.props.currentUser.user.id)\n    }\n\n    // localListHandler = (e) => {\n    //     e.preventDefault()\n    //     this.props.localListHandler({\n    //         ingredient_id: this.props.ingredient.id,\n    //         user_id: this.props.currentUser.user.id\n    //     })\n\n    // }\n    //need to find the id of the ingredient whose name matches \n\n    clickHandler = () => {\n        console.log(\"click\")\n    }\n    \n    ingredientCheck = (name) => {\n        let ingNames = this.props.userIngApi.map(ingredient => ingredient.name)\n        let shoppingNames = this.props.shoppingListApi.map(ing => ing.ingredient.name)\n        if(ingNames.includes(name)) {\n            return <Icon color='green' size='big' name='check circle' />\n        }else if(shoppingNames.includes(name)){\n            return <Icon color='blue' size='big' name='shopping cart'/>\n        }else{\n            return <Icon color='red' size='big' name='exclamation circle' />\n        }\n    }\n\n    howManyIngs = (cocktailObj) => {\n        let cocktail = cocktailObj.cocktail_ingredients\n        let ingNames = this.props.userIngApi.map(ingredient => ingredient.name)\n        let hasThis = cocktail.filter((ing) => ingNames.includes(ing.name))\n        let missingIngCount = cocktail.length - hasThis.length\n        if(missingIngCount >= 1){\n            return `You are missing ${missingIngCount} ingredients `\n        } else {\n            return 'You have all the Ingredients!'\n        }\n    }\n\n    renderIngTable = () => {\n        let cocktIngs = this.props.cocktail.cocktail_ingredients\n        return cocktIngs.map((ingredient, index) => {\n            const { name, unit, quantity } = ingredient\n            return(\n                <List.Item floated='left'>\n                    <List.Content floated='left'>\n                        {this.ingredientCheck(name)} {quantity} {unit} {name} \n                    </List.Content>\n                </List.Item>\n            )\n        })\n    }\n\n    render() {\n        const { cocktail } = this.props\n        return (\n                <Card>\n                    <Image className='cocktail-image' bordered src ={cocktail.image_url} />\n                    <Card.Content>\n                        {cocktail.name}\n                    </Card.Content>\n                    <Card.Content extra>\n                        <Button color='blue' onClick={this.localSaveHandler} content='Save Cocktail' />\n                        <Modal className='cocktail-modal'\n                            size='large'\n                            closeIcon\n                            onClose={() => this.toggleModal()}\n                            onOpen={() => this.toggleModal()}\n                            open={this.state.open}\n                            trigger={\n                                <Button\n                                content='Learn More'\n                                positive\n                                onClick={() => {\n                                    this.toggleModal();\n                                }}\n                                />\n                            }>\n                            <Modal.Header className='modal-header' textAlign='center' >\n                                <h3>{cocktail.name}</h3>\n                            </Modal.Header>\n                                <Segment>\n                                    <Grid columns={3} stackable>\n                                        <Grid.Column width={8} className='modal-image-column' >\n                                            <Image src={cocktail.image_url} alt={cocktail.name} size='large' rounded floated='left' />\n                                        </Grid.Column>\n                                        <Grid.Column className='cocktail-column' width={3}>\n                                            <List relaxed verticalAlign='left'>\n                                                <List.Item><strong>Category:</strong> {cocktail.category}</List.Item>\n                                                <List.Item><strong>Glass:</strong> {cocktail.recommended_glass}</List.Item>\n                                                <List.Item><strong>Ice:</strong> {cocktail.recommended_ice}</List.Item>\n                                                <List.Item><strong>Garnish:</strong> {cocktail.garnish}</List.Item>\n                                            </List>\n                                            <List relaxed bulleted floated='left' verticalAlign='bottom'>\n                                                <List.Header><strong>Recipe</strong></List.Header>\n                                                {cocktail.instructions.map(element => <List.Item floated='left'><List.Content floated='left'>{element}</List.Content></List.Item>)}\n                                            </List>\n                                            {/* <Label>Category: {cocktail.category}</Label>\n                                            <Label>{this.howManyIngs(this.props.cocktail)}</Label> */}\n                                        </Grid.Column>\n                                        <Grid.Column className='cocktail-column' width={5}>\n            \n                                            <List animated relaxed='very' verticalAlign='left'>\n                                                <List.Header textAlign='center'>{this.howManyIngs(this.props.cocktail)}</List.Header>\n                                                {this.renderIngTable()}\n                                            </List>\n                                            <Button attached='bottom' color='green' onClick={this.localSaveHandler}>Add to Saved Cocktails</Button>\n                                        </Grid.Column>\n                                    </Grid>\n                                </Segment>\n                            {/* </Modal.Content> */}\n                            \n                            {/* <Modal.Actions>\n                                <Button color=\"red\" onClick={() => this.toggleModal()}>Exit</Button>\n                            </Modal.Actions> */}\n                        </Modal>\n                    </Card.Content>\n                </Card>\n\n        );\n    }\n}\nfunction mdp(dispatch){\n    return{\n        fetchIngredients: () => dispatch(getIngredients()),\n        fetchCocktails: () => dispatch(getCocktails()),\n        fetchUserIngs: () => dispatch(getUserIngredients()),\n        localListHandler: (ingredient) => dispatch(addToShoppingList(ingredient)),\n        localSaveHandler: (cocktailId, userId) => dispatch(saveCocktail(cocktailId, userId)),\n        fetchShoppingList: () => dispatch(getShoppingList()) \n    }\n}\n\nfunction msp(state){\n    return {\n        currentUser: state.currentUser,\n        userIngApi: state.userIngApi,\n        cocktailsApi: state.cocktailsApi,\n        shoppingListApi: state.shoppingListApi\n    }\n}\n\nexport default connect(msp, mdp)(CocktailItem);\n\n\n","/Users/andrea/tendr/tendr-react-frontend/src/Components/ShoppingListItem.js",[],"/Users/andrea/tendr/tendr-react-frontend/src/Components/FilterCocktails.js",["106","107","108","109","110","111"],"/Users/andrea/tendr/tendr-react-frontend/src/reportWebVitals.js",[],"/Users/andrea/tendr/tendr-react-frontend/src/Components/Header.js",["112"],"/Users/andrea/tendr/tendr-react-frontend/src/Containers/AllIngContainer.js",["113","114"],"/Users/andrea/tendr/tendr-react-frontend/src/Components/LogInForm.js",[],"/Users/andrea/tendr/tendr-react-frontend/src/Components/Ingredient.js",[],{"ruleId":"115","severity":1,"message":"116","line":2,"column":19,"nodeType":"117","messageId":"118","endLine":2,"endColumn":24},{"ruleId":"115","severity":1,"message":"119","line":2,"column":52,"nodeType":"117","messageId":"118","endLine":2,"endColumn":60},{"ruleId":"120","severity":1,"message":"121","line":58,"column":34,"nodeType":"122","messageId":"123","endLine":58,"endColumn":36},{"ruleId":"115","severity":1,"message":"124","line":2,"column":10,"nodeType":"117","messageId":"118","endLine":2,"endColumn":20},{"ruleId":"115","severity":1,"message":"125","line":2,"column":24,"nodeType":"117","messageId":"118","endLine":2,"endColumn":28},{"ruleId":"115","severity":1,"message":"126","line":2,"column":30,"nodeType":"117","messageId":"118","endLine":2,"endColumn":35},{"ruleId":"127","replacedBy":"128"},{"ruleId":"129","replacedBy":"130"},{"ruleId":"115","severity":1,"message":"131","line":2,"column":18,"nodeType":"117","messageId":"118","endLine":2,"endColumn":27},{"ruleId":"115","severity":1,"message":"116","line":2,"column":24,"nodeType":"117","messageId":"118","endLine":2,"endColumn":29},{"ruleId":"115","severity":1,"message":"126","line":2,"column":31,"nodeType":"117","messageId":"118","endLine":2,"endColumn":36},{"ruleId":"115","severity":1,"message":"132","line":2,"column":50,"nodeType":"117","messageId":"118","endLine":2,"endColumn":55},{"ruleId":"115","severity":1,"message":"133","line":2,"column":8,"nodeType":"117","messageId":"118","endLine":2,"endColumn":14},{"ruleId":"127","replacedBy":"134"},{"ruleId":"129","replacedBy":"135"},{"ruleId":"115","severity":1,"message":"125","line":5,"column":19,"nodeType":"117","messageId":"118","endLine":5,"endColumn":23},{"ruleId":"115","severity":1,"message":"125","line":2,"column":31,"nodeType":"117","messageId":"118","endLine":2,"endColumn":35},{"ruleId":"115","severity":1,"message":"126","line":2,"column":37,"nodeType":"117","messageId":"118","endLine":2,"endColumn":42},{"ruleId":"115","severity":1,"message":"136","line":2,"column":72,"nodeType":"117","messageId":"118","endLine":2,"endColumn":79},{"ruleId":"115","severity":1,"message":"119","line":2,"column":10,"nodeType":"117","messageId":"118","endLine":2,"endColumn":18},{"ruleId":"115","severity":1,"message":"137","line":2,"column":20,"nodeType":"117","messageId":"118","endLine":2,"endColumn":24},{"ruleId":"115","severity":1,"message":"138","line":2,"column":26,"nodeType":"117","messageId":"118","endLine":2,"endColumn":33},{"ruleId":"115","severity":1,"message":"139","line":2,"column":35,"nodeType":"117","messageId":"118","endLine":2,"endColumn":39},{"ruleId":"115","severity":1,"message":"140","line":2,"column":41,"nodeType":"117","messageId":"118","endLine":2,"endColumn":47},{"ruleId":"115","severity":1,"message":"141","line":4,"column":10,"nodeType":"117","messageId":"118","endLine":4,"endColumn":28},{"ruleId":"115","severity":1,"message":"142","line":2,"column":10,"nodeType":"117","messageId":"118","endLine":2,"endColumn":16},{"ruleId":"115","severity":1,"message":"143","line":6,"column":10,"nodeType":"117","messageId":"118","endLine":6,"endColumn":18},{"ruleId":"115","severity":1,"message":"144","line":7,"column":8,"nodeType":"117","messageId":"118","endLine":7,"endColumn":24},"no-unused-vars","'Image' is defined but never used.","Identifier","unusedVar","'Dropdown' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'withRouter' is defined but never used.","'Item' is defined but never used.","'Label' is defined but never used.","no-native-reassign",["145"],"no-negated-in-lhs",["146"],"'Container' is defined but never used.","'Modal' is defined but never used.","'Header' is defined but never used.",["145"],["146"],"'Divider' is defined but never used.","'Grid' is defined but never used.","'Segment' is defined but never used.","'Form' is defined but never used.","'Select' is defined but never used.","'getUserIngredients' is defined but never used.","'Sticky' is defined but never used.","'Redirect' is defined but never used.","'IngredientSearch' is defined but never used.","no-global-assign","no-unsafe-negation"]