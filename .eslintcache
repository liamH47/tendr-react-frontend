[{"/Users/andrea/tendr/tendr-react-frontend/src/Components/SavedCocktailItem.js":"1","/Users/andrea/tendr/tendr-react-frontend/src/Components/UserCocktail.js":"2","/Users/andrea/tendr/tendr-react-frontend/src/Components/CocktailItem.js":"3","/Users/andrea/tendr/tendr-react-frontend/src/Containers/MainContainer.js":"4","/Users/andrea/tendr/tendr-react-frontend/src/Components/Header.js":"5","/Users/andrea/tendr/tendr-react-frontend/src/Components/SignUpForm.js":"6","/Users/andrea/tendr/tendr-react-frontend/src/Components/CocktailSearch.js":"7","/Users/andrea/tendr/tendr-react-frontend/src/Components/UserIngredient.js":"8","/Users/andrea/tendr/tendr-react-frontend/src/Components/IngredientSearch.js":"9","/Users/andrea/tendr/tendr-react-frontend/src/Components/Ingredient.js":"10","/Users/andrea/tendr/tendr-react-frontend/src/Components/Cocktail.js":"11","/Users/andrea/tendr/tendr-react-frontend/src/Components/LogInForm.js":"12","/Users/andrea/tendr/tendr-react-frontend/src/Components/ShoppingListItem.js":"13","/Users/andrea/tendr/tendr-react-frontend/src/Redux/rootReducer.js":"14","/Users/andrea/tendr/tendr-react-frontend/src/App.js":"15","/Users/andrea/tendr/tendr-react-frontend/src/Containers/MyIngrContainer.js":"16","/Users/andrea/tendr/tendr-react-frontend/src/Containers/MyCocktailsCont.js":"17","/Users/andrea/tendr/tendr-react-frontend/src/Containers/SavedCocktailsCont.js":"18","/Users/andrea/tendr/tendr-react-frontend/src/Containers/AllCocktails.js":"19","/Users/andrea/tendr/tendr-react-frontend/src/Components/CocktailModal.js":"20","/Users/andrea/tendr/tendr-react-frontend/src/Containers/AllIngContainer.js":"21","/Users/andrea/tendr/tendr-react-frontend/src/Containers/ShoppingListCont.js":"22","/Users/andrea/tendr/tendr-react-frontend/src/Components/Navbar.js":"23","/Users/andrea/tendr/tendr-react-frontend/src/Containers/LogInContainer.js":"24","/Users/andrea/tendr/tendr-react-frontend/src/Components/Loading.js":"25","/Users/andrea/tendr/tendr-react-frontend/src/Components/TendrHeader.js":"26"},{"size":6587,"mtime":1609883401000,"results":"27","hashOfConfig":"28"},{"size":910,"mtime":1609103158000,"results":"29","hashOfConfig":"28"},{"size":7805,"mtime":1609981244000,"results":"30","hashOfConfig":"28"},{"size":1860,"mtime":1609955736000,"results":"31","hashOfConfig":"28"},{"size":994,"mtime":1609956551000,"results":"32","hashOfConfig":"28"},{"size":1772,"mtime":1609864824000,"results":"33","hashOfConfig":"28"},{"size":399,"mtime":1609981495000,"results":"34","hashOfConfig":"28"},{"size":2749,"mtime":1609103158000,"results":"35","hashOfConfig":"28"},{"size":378,"mtime":1609864823000,"results":"36","hashOfConfig":"28"},{"size":2627,"mtime":1609883103000,"results":"37","hashOfConfig":"28"},{"size":4242,"mtime":1609894413000,"results":"38","hashOfConfig":"28"},{"size":1749,"mtime":1609968881000,"results":"39","hashOfConfig":"28"},{"size":1078,"mtime":1609724461000,"results":"40","hashOfConfig":"28"},{"size":3995,"mtime":1609794023000,"results":"41","hashOfConfig":"28"},{"size":2099,"mtime":1609970928000,"results":"42","hashOfConfig":"28"},{"size":2299,"mtime":1609892816000,"results":"43","hashOfConfig":"28"},{"size":1953,"mtime":1609892966000,"results":"44","hashOfConfig":"28"},{"size":1480,"mtime":1609892628000,"results":"45","hashOfConfig":"28"},{"size":3042,"mtime":1609948486000,"results":"46","hashOfConfig":"28"},{"size":1660,"mtime":1609876832000,"results":"47","hashOfConfig":"28"},{"size":3574,"mtime":1609980664000,"results":"48","hashOfConfig":"28"},{"size":1393,"mtime":1609960834000,"results":"49","hashOfConfig":"28"},{"size":994,"mtime":1609950920000,"results":"50","hashOfConfig":"28"},{"size":635,"mtime":1609967875000,"results":"51","hashOfConfig":"28"},{"size":590,"mtime":1609961618000,"results":"52","hashOfConfig":"28"},{"size":425,"mtime":1609980189000,"results":"53","hashOfConfig":"28"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56"},"1wjrw23",{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"65","messages":"66","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"69","messages":"70","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"74","messages":"75","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"77"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"80","messages":"81","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"88","messages":"89","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"90","messages":"91","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"92","messages":"93","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"95"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"98","messages":"99","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"111","messages":"112","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"113"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/andrea/tendr/tendr-react-frontend/src/Components/SavedCocktailItem.js",["118"],"import React, { Component } from 'react';\nimport { Button, Icon, Item, Label, List, Form} from 'semantic-ui-react'\nimport { connect } from 'react-redux'\nimport { getCocktails, getUserIngredients, addToShoppingList, getIngredients, addNote, getSavedCocktails, deleteSavedCocktail, getShoppingList } from '../Redux/actions'\n\nclass SavedCocktailItem extends Component {\n\n    state = {\n        notes: \"\"\n    }\n\n    changeHandler = (e) => {\n        this.setState({ [e.target.name]: e.target.value })\n    }\n\n    componentDidMount() {\n        this.props.fetchSavedCocktails()\n        this.props.fetchIngredients()\n        this.props.fetchUserIngs()\n        this.props.fetchShoppingList()\n        console.log(\"saved cocktail render props:\", this.props)\n    }\n\n    localSaveHandler = (e) => {\n        e.preventDefault()\n        this.props.localSaveHandler( this.props.savedCocktail.cocktail_id, this.props.currentUser.user.id)\n        console.log(\"hello?\")\n    }\n\n    localDeleteHandler = () => {\n        this.props.localDeleteHandler(this.props.id)\n    }\n\n    localNoteHandler = (e) => {\n        e.preventDefault()\n        let currentNotes = this.props.savedCocktail.notes\n        let newNotes = [...currentNotes, this.state.notes]\n        const updateObj = {\n            id: this.props.id,\n            user_id: this.props.savedCocktail.user_id,\n            cocktail_id: this.props.savedCocktail.cocktail_id,\n            notes: newNotes,\n            user: this.props.savedCocktail.user,\n            cocktail: this.props.savedCocktail.cocktail\n        }\n        this.props.addNewNote(updateObj)\n        e.target.reset()\n    }\n    \n    ingredientCheck = (name) => {\n        let ingNames = this.props.userIngApi.map(ingredient => ingredient.name)\n        let shoppingNames = this.props.shoppingListApi.map(ing => ing.ingredient.name)\n        if(ingNames.includes(name)) {\n            return <Icon color='green' size='big' name='check circle' />\n        }else if(shoppingNames.includes(name)){\n            return <Icon color='blue' size='big' name='shopping cart'/>\n        }else{\n            return <Icon color='red' size='big' name='exclamation circle' />\n        }\n    }\n\n    howManyIngs = (cocktailObj) => {\n        let cocktail = cocktailObj.cocktail_ingredients\n        let ingNames = this.props.userIngApi.map(ingredient => ingredient.name)\n        let hasThis = cocktail.filter((ing) => ingNames.includes(ing.name))\n        let missingIngCount = cocktail.length - hasThis.length\n        if(missingIngCount >= 1){\n            return `You are missing ${missingIngCount} ingredients `\n        } else {\n            return 'You have all the Ingredients!'\n        }\n    }\n\n    renderIngTable = () => {\n        let cocktIngs = this.props.cocktail.cocktail_ingredients\n        return cocktIngs.map((ingredient, index) => {\n            const { name, unit, quantity } = ingredient\n            return(\n                <List.Item floated='left'>\n                    <List.Content floated='left'>\n                        {this.ingredientCheck(name)} {quantity} {unit} {name} \n                    </List.Content>\n                </List.Item>\n            )\n        })\n    }\n\n    render() {\n        // const { savedCocktail } = this.props.savedCocktail\n        return (\n            <Item padded='very'>\n                <Item.Image rounded size='large' floated='left' src={this.props.savedCocktail.cocktail.image_url} />\n                <Item.Content floated='left'>\n                    <Item.Header className='cocktail-item-header' floated='left'><h1>{this.props.savedCocktail.cocktail.name}</h1></Item.Header>\n                    <Item.Meta>{this.props.savedCocktail.cocktail.category}</Item.Meta>\n                    <Item.Description>{this.howManyIngs(this.props.savedCocktail.cocktail)}</Item.Description>\n                    <List animated verticalAlign='middle'>\n                        {/* <List.Header floated='left'>Ingredients</List.Header> */}\n                        {this.renderIngTable()}\n                    </List>\n                    <Item.Description>Glass: {this.props.savedCocktail.cocktail.recommended_glass} </Item.Description>\n                    <Item.Description>Ice: {this.props.savedCocktail.cocktail.recommended_ice} </Item.Description>\n                    <List ordered floated='left'>\n                        <List.Header floated='left'>Instructions</List.Header>\n                        {this.props.savedCocktail.cocktail.instructions.map(element => <List.Item floated='left'><List.Content floated='left'>{element}</List.Content></List.Item>)}\n                    </List>\n                </Item.Content>\n                <Item.Content floated='right'>\n                    <List verticalAlign='middle' bulleted floated='right'>\n                        <List.Header>My Notes</List.Header>\n                        {this.props.savedCocktail.notes.map(element => <List.Item floated='left'><List.Content floated='left'>{element}</List.Content></List.Item>)}\n                    </List>\n                    <Form onSubmit={this.localNoteHandler}>\n                        <Form.Field>\n                            <label>Notes</label>\n                            <input type='text' name='notes' value={this.state.notes} onChange={this.changeHandler} placeholder='your notes' />\n                        </Form.Field>\n                        <Button type='submit'>Add Note</Button>\n                    </Form>\n                        \n                    <Button verticalAlign='bottom' onClick={this.localDeleteHandler}>Remove From Saved Cocktails</Button>\n                </Item.Content>\n            </Item>\n        );\n    }\n}\nfunction mdp(dispatch){\n    return{\n        fetchIngredients: () => dispatch(getIngredients()),\n        fetchCocktails: () => dispatch(getCocktails()),\n        fetchUserIngs: () => dispatch(getUserIngredients()),\n        localListHandler: (ingredient) => dispatch(addToShoppingList(ingredient)),\n        fetchSavedCocktails: () => dispatch(getSavedCocktails()),\n        addNewNote: (updateObj) => dispatch(addNote(updateObj)),\n        localDeleteHandler: (id) => dispatch(deleteSavedCocktail(id)),\n        localSaveHandler: (ingredient) => dispatch(addToShoppingList(ingredient)),\n        fetchShoppingList: () => dispatch(getShoppingList()) \n    }\n}\n\nfunction msp(state){\n    return {\n        currentUser: state.currentUser,\n        userIngApi: state.userIngApi,\n        cocktailsApi: state.cocktailsApi,\n        savedCocktails: state.savedCocktails,\n        shoppingListApi: state.shoppingListApi\n    }\n}\n\nexport default connect(msp, mdp)(SavedCocktailItem);","/Users/andrea/tendr/tendr-react-frontend/src/Components/UserCocktail.js",[],["119","120"],"/Users/andrea/tendr/tendr-react-frontend/src/Components/CocktailItem.js",["121","122","123"],"import React, { Component } from 'react';\nimport { Button, Icon, Image, Item, Label, List, Modal, Segment, Grid, Divider, Card} from 'semantic-ui-react'\nimport { connect } from 'react-redux'\nimport { getCocktails, getUserIngredients, addToShoppingList, getIngredients, saveCocktail, getShoppingList } from '../Redux/actions'\n\nclass CocktailItem extends Component {\n\n    state = {\n        clicked: false,\n        open: false\n      }\n    \n      toggleHandler = () => {\n        this.setState({\n          clicked: !this.state.clicked,\n        })\n      }\n    \n      toggleModal = () => {\n        this.setState({\n          open: !this.state.open,\n        })\n      }\n\n    componentDidMount() {\n        this.props.fetchIngredients()\n        this.props.fetchUserIngs()\n        this.props.fetchShoppingList()\n        console.log(this.props.currentUser)\n        this.setState({ clicked: false, open: false})\n        // debugger\n    }\n\n\n    localSaveHandler = (e) => {\n        e.preventDefault()\n        this.props.localSaveHandler( this.props.cocktail.id, this.props.currentUser.user.id)\n    }\n\n    // localListHandler = (e) => {\n    //     e.preventDefault()\n    //     this.props.localListHandler({\n    //         ingredient_id: this.props.ingredient.id,\n    //         user_id: this.props.currentUser.user.id\n    //     })\n\n    // }\n    //need to find the id of the ingredient whose name matches \n\n    clickHandler = () => {\n        console.log(\"click\")\n    }\n    \n    ingredientCheck = (name) => {\n        let ingNames = this.props.userIngApi.map(ingredient => ingredient.name)\n        let shoppingNames = this.props.shoppingListApi.map(ing => ing.ingredient.name)\n        if(ingNames.includes(name)) {\n            return <Icon color='green' size='big' name='check circle' />\n        }else if(shoppingNames.includes(name)){\n            return <Icon color='blue' size='big' name='shopping cart'/>\n        }else{\n            return <Icon color='red' size='big' name='exclamation circle' />\n        }\n    }\n\n    howManyIngs = (cocktailObj) => {\n        let cocktail = cocktailObj.cocktail_ingredients\n        let ingNames = this.props.userIngApi.map(ingredient => ingredient.name)\n        let hasThis = cocktail.filter((ing) => ingNames.includes(ing.name))\n        let missingIngCount = cocktail.length - hasThis.length\n        if(missingIngCount >= 1){\n            return `You are missing ${missingIngCount} ingredients `\n        } else {\n            return 'You have all the Ingredients!'\n        }\n    }\n\n    renderIngTable = () => {\n        let cocktIngs = this.props.cocktail.cocktail_ingredients\n        return cocktIngs.map((ingredient, index) => {\n            const { name, unit, quantity } = ingredient\n            return(\n                <List.Item floated='left'>\n                    <List.Content floated='left'>\n                        {this.ingredientCheck(name)} {quantity} {unit} {name} \n                    </List.Content>\n                </List.Item>\n            )\n        })\n    }\n\n    render() {\n        const { cocktail } = this.props\n        return (\n                <Card>\n                    <Image bordered src ={cocktail.image_url} />\n                    <Card.Content>\n                        {cocktail.name}\n                    </Card.Content>\n                    <Card.Content extra>\n                        <Button positive color='green' onClick={this.localSaveHandler} content='Save Cocktail' />\n                        <Modal\n                            size='large'\n                            closeIcon\n                            onClose={() => this.toggleModal()}\n                            onOpen={() => this.toggleModal()}\n                            open={this.state.open}\n                            trigger={\n                                <Button\n                                content='Learn More'\n                                positive\n                                onClick={() => {\n                                    this.toggleModal();\n                                }}\n                                />\n                            }>\n                            <Modal.Header textAlign='center' >\n                                <h3>{cocktail.name}</h3>\n                            </Modal.Header>\n                                <Segment>\n                                    <Grid columns={3} stackable>\n                                        <Grid.Column width={6} >\n                                            <Image src={cocktail.image_url} alt={cocktail.name} size='large' rounded floated='left' />\n                                        </Grid.Column>\n                                        <Grid.Column width={3}>\n                                            <List relaxed  verticalAlign='left'>\n                                                <List.Item><strong>Category:</strong> {cocktail.category}</List.Item>\n                                                <List.Item><strong>Glass:</strong> {cocktail.recommended_glass}</List.Item>\n                                                <List.Item><strong>Ice:</strong> {cocktail.recommended_ice}</List.Item>\n                                                <List.Item><strong>Garnish:</strong> {cocktail.garnish}</List.Item>\n                                            </List>\n                                            <List relaxed bulleted floated='left' verticalAlign='bottom'>\n                                                <List.Header><strong>Recipe</strong></List.Header>\n                                                {cocktail.instructions.map(element => <List.Item floated='left'><List.Content floated='left'>{element}</List.Content></List.Item>)}\n                                            </List>\n                                            {/* <Label>Category: {cocktail.category}</Label>\n                                            <Label>{this.howManyIngs(this.props.cocktail)}</Label> */}\n                                        </Grid.Column>\n                                        <Grid.Column width={3}>\n            \n                                            <List animated relaxed='very' verticalAlign='left'>\n                                                <List.Header textAlign='center'>{this.howManyIngs(this.props.cocktail)}</List.Header>\n                                                {this.renderIngTable()}\n                                            </List>\n                                            <Button attached='bottom' color='green' onClick={this.localSaveHandler}>Add to Saved Cocktails</Button>\n                                        </Grid.Column>\n                                    </Grid>\n                                </Segment>\n                            {/* </Modal.Content> */}\n                            \n                            {/* <Modal.Actions>\n                                <Button color=\"red\" onClick={() => this.toggleModal()}>Exit</Button>\n                            </Modal.Actions> */}\n                        </Modal>\n                    </Card.Content>\n                </Card>\n\n        );\n    }\n}\nfunction mdp(dispatch){\n    return{\n        fetchIngredients: () => dispatch(getIngredients()),\n        fetchCocktails: () => dispatch(getCocktails()),\n        fetchUserIngs: () => dispatch(getUserIngredients()),\n        localListHandler: (ingredient) => dispatch(addToShoppingList(ingredient)),\n        localSaveHandler: (cocktailId, userId) => dispatch(saveCocktail(cocktailId, userId)),\n        fetchShoppingList: () => dispatch(getShoppingList()) \n    }\n}\n\nfunction msp(state){\n    return {\n        currentUser: state.currentUser,\n        userIngApi: state.userIngApi,\n        cocktailsApi: state.cocktailsApi,\n        shoppingListApi: state.shoppingListApi\n    }\n}\n\nexport default connect(msp, mdp)(CocktailItem);\n\n\n","/Users/andrea/tendr/tendr-react-frontend/src/Containers/MainContainer.js",["124","125"],"/Users/andrea/tendr/tendr-react-frontend/src/Components/Header.js",["126"],"/Users/andrea/tendr/tendr-react-frontend/src/Components/SignUpForm.js",[],"/Users/andrea/tendr/tendr-react-frontend/src/Components/CocktailSearch.js",["127"],"import React from 'react';\nimport { Form, Input } from 'semantic-ui-react'\n\nconst CocktailSearch = ({ searchValue, changeHandler }) => {\n    return(\n        <div>\n            <Form size='mini'>\n                <Form.Input size='small' type=\"text\" value={searchValue} onChange={changeHandler} placeholder=\"search by name\" />\n            </Form>\n        </div>\n    ) \n\n}\n\nexport default CocktailSearch","/Users/andrea/tendr/tendr-react-frontend/src/Components/UserIngredient.js",["128"],"/Users/andrea/tendr/tendr-react-frontend/src/Components/IngredientSearch.js",["129"],"import React from 'react';\nimport { Form, Input } from 'semantic-ui-react'\n\nconst IngredientSearch = ({ searchValue, changeHandler }) => {\n    return(\n        <div>\n            <Form>\n                <Form.Input type=\"text\" value={searchValue} onChange={changeHandler} placeholder=\"search by name\" />\n            </Form>\n        </div>\n    ) \n\n}\n\nexport default IngredientSearch",["130","131"],"/Users/andrea/tendr/tendr-react-frontend/src/Components/Ingredient.js",[],"/Users/andrea/tendr/tendr-react-frontend/src/Components/Cocktail.js",["132","133","134"],"/Users/andrea/tendr/tendr-react-frontend/src/Components/LogInForm.js",[],"/Users/andrea/tendr/tendr-react-frontend/src/Components/ShoppingListItem.js",[],"/Users/andrea/tendr/tendr-react-frontend/src/Redux/rootReducer.js",[],"/Users/andrea/tendr/tendr-react-frontend/src/App.js",["135"],"/Users/andrea/tendr/tendr-react-frontend/src/Containers/MyIngrContainer.js",["136"],"/Users/andrea/tendr/tendr-react-frontend/src/Containers/MyCocktailsCont.js",["137","138"],"import React, { Component } from 'react';\nimport {Segment, Container, Card} from 'semantic-ui-react'\nimport UserCocktail from '../Components/UserCocktail';\n// import UserIngredient from '../Components/UserIngredient';\nimport { connect } from 'react-redux'\nimport {getUserIngredients, getCocktails} from '../Redux/actions'\n\nclass MyCocktailsCont extends Component {\n\n    componentDidMount() {\n        this.props.fetchUserIngredients()\n        this.props.fetchCocktails()\n    }\n    \n    renderCocktails = () => {\n        let filtered = this.props.cocktailsApi.filter(el => this.checkCanMake(el, this.props.userIngApi) === true)\n        return filtered.map(tailObj => <UserCocktail cocktail={tailObj} id={tailObj.id} key={tailObj.id} />)\n     }\n\n     checkCanMake(singleCockt, userIngApi) {\n         let cocktail = singleCockt.cocktail_ingredients\n         return cocktail.every(function(ing) {\n          return userIngApi.some(function(ing2) {\n            console.log(ing.name, ing2.name)\n            console.log(ing.quantity, ing2.quantity)\n             return (ing.name == ing2.name) && (ing.quantity <= ing2.quantity) \n           })\n         })\n     }\n\n\n    render() {\n        return (\n            <> {this.props.cocktailsApi.length ? \n                <Segment basic padded='very' vertical>\n                    <h2>Possible Drinks</h2>\n                    <Card.Group centered>\n                        {this.renderCocktails()}\n                    </Card.Group>\n                </Segment>\n            : <h2>loading</h2>\n                }\n            </>\n        );\n    }\n}\n\nfunction mdp(dispatch){\n    return {\n        fetchUserIngredients: () => dispatch(getUserIngredients()),\n        fetchCocktails: () => dispatch(getCocktails())\n    }\n}\nfunction msp(state){\n    return {\n        currentUser: state.currentUser,\n        userIngApi: state.userIngApi,\n        cocktailsApi: state.cocktailsApi\n    }\n}\n\nexport default connect(msp, mdp)(MyCocktailsCont)",["139","140"],"/Users/andrea/tendr/tendr-react-frontend/src/Containers/SavedCocktailsCont.js",[],"/Users/andrea/tendr/tendr-react-frontend/src/Containers/AllCocktails.js",["141","142"],"import React, { Component } from 'react';\nimport { Segment, Image, Card, Container} from 'semantic-ui-react'\nimport { connect } from 'react-redux'\nimport { getUserIngredients, getCocktails} from '../Redux/actions'\nimport CocktailItem from '../Components/CocktailItem'\nimport CocktailSearch from '../Components/CocktailSearch'\n\nclass AllCocktails extends Component {\n\n    state =  {\n        searchValue: \"\"\n    }\n\n    changeHandler = (e) => {\n        this.setState({ searchValue: e.target.value })\n    }\n\n    componentDidMount() {\n        this.props.fetchCocktails()\n        // console.log(this.props.currentUser)\n        // debugger\n    }\n\n    renderAllCocktails = () => {\n        let filtered = this.props.cocktailsApi.filter(el => this.checkCanMake(el, this.props.userIngApi) === false)\n        let sorted = filtered.sort((a, b) => this.howManyIngs(a) - this.howManyIngs(b))\n        let searchArray = sorted.filter(cocktail => cocktail.name.toLowerCase().includes(this.state.searchValue.toLowerCase()))\n        return searchArray.map(tailObj => <CocktailItem name={tailObj.name} image_url={tailObj.image_url} cocktail={tailObj} id={tailObj.id} key={tailObj.id} />)\n     }\n\n     howManyIngs = (cocktailObj) => {\n        let cocktail = cocktailObj.cocktail_ingredients\n        let ingNames = this.props.userIngApi.map(ingredient => ingredient.name)\n        let hasThis = cocktail.filter((ing) => ingNames.includes(ing.name))\n        return cocktail.length - hasThis.length\n    }\n    \n     checkCanMake(singleCockt, userIngApi) {\n         let cocktail = singleCockt.cocktail_ingredients\n         return cocktail.every(function(ing) {\n          return userIngApi.some(function(ing2) {\n             return (ing.name == ing2.name) && (ing.quantity <= ing2.quantity) \n           })\n         })\n     }\n    \n    render() {\n        return (\n            <> {this.props.cocktailsApi.length ? \n                <Container>\n                    <Segment textAlign='center' basic padded='very' vertical>\n                        <h2>All Cocktails</h2>\n                        <CocktailSearch changeHandler={this.changeHandler} searchValue={this.state.searchValue} />\n                    </Segment>\n                        {/* <Item.Group relaxed divided>\n                            {this.renderAllCocktails()}\n                        </Item.Group> */}\n                    <Segment>\n                        <Card.Group centered >\n                            {this.renderAllCocktails()}\n                            </Card.Group>\n                    </Segment>\n                </Container>\n                 : <h2>loading</h2>\n                 }\n            </>\n        );\n    }\n}\n\n\nfunction mdp(dispatch){\n    return{\n        fetchUserIngredients: () => dispatch(getUserIngredients()),\n        fetchCocktails: () => dispatch(getCocktails())\n    }\n}\n\nfunction msp(state){\n    return {\n        currentUser: state.currentUser,\n        userIngApi: state.userIngApi,\n        cocktailsApi: state.cocktailsApi\n    }\n}\n\n\nexport default connect(msp, mdp)(AllCocktails);","/Users/andrea/tendr/tendr-react-frontend/src/Components/CocktailModal.js",["143","144","145","146"],"import React, { useState } from 'react'\nimport { Button, Header, Image, Modal, List, Card, Icon } from 'semantic-ui-react'\n\n\nconst CocktailModal = (props) => {\n\n\n  \n\n  const [open, setOpen] = React.useState(false)\n//   <Image.Header>{props.name}</Image.Header>\n//   {<Button>{props.name}</Button>}\n    // <Card>\n    //     <Image src={props.cocktail.image_url} wrapped ui={false} size='small'/>\n    //     <Card.Content>\n\n    //     <Card.Header>{props.name}</Card.Header>\n    //     </Card.Content>\n    // </Card>\n  return (\n      <Modal\n      onClose={() => setOpen(false)}\n      onOpen={() => setOpen(true)}\n      open={open}\n      trigger={<Button>Show Modal</Button>}\n      >\n      <Modal.Header textAlign='center'>\n        <h1>{props.name}</h1>\n        <p>{props.category}</p>\n      </Modal.Header>\n      <Modal.Content image>\n        <Image size='medium' src={props.image_url} alt={props.name} wrapped />\n        <Modal.Description>\n          <Header textAlign='center' content={props.name} />\n          {/* <List ordered verticalAlign='bottom'>\n                        {props.cocktail.instructions.map(element => <List.Item>{element}</List.Item>)}\n          </List> */}\n        </Modal.Description>\n      </Modal.Content>\n      <Modal.Actions>\n        <Button color='black' onClick={() => setOpen(false)}>\n          Nope\n        </Button>\n        <Button\n          content=\"Yep, that's me\"\n          labelPosition='right'\n          icon='checkmark'\n          onClick={() => setOpen(false)}\n          positive\n          />\n      </Modal.Actions>\n    </Modal>\n        \n\n//   console.log(\"modal return func\", this.props)\n)\n\n}\n\nexport default CocktailModal","/Users/andrea/tendr/tendr-react-frontend/src/Containers/AllIngContainer.js",["147"],"import React, { Component } from 'react';\nimport { Segment, Card, Container } from 'semantic-ui-react'\nimport Ingredient from '../Components/Ingredient'\nimport { connect } from 'react-redux'\nimport {getIngredients, getUserIngredients, getCocktails} from '../Redux/actions'\nimport { Redirect } from 'react-router-dom'\nimport IngredientSearch from '../Components/IngredientSearch'\n\nclass AllIngContainer extends Component {\n\n    state =  {\n        searchValue: \"\",\n        // categories: []\n    }\n\n    changeHandler = (e) => {\n        this.setState({ searchValue: e.target.value })\n    }\n \n    componentDidMount() {\n            this.props.fetchIngredients()\n            this.props.fetchUserIngredients()\n            this.props.fetchCocktails()\n            // debugger\n    }\n\n    // setCategories = () => {\n    //     let \n    // }\n\n    renderIngredients = () => {\n        if(this.props.userIngApi.length > 0) {\n            let ids = this.props.userIngApi.map(obj => obj.ingredient_id)\n            let ingredients = this.props.ingredientsApi\n            let filtered = ingredients.filter((obj) => !ids.includes(obj.id))\n            let sorted = filtered.sort((a, b) => this.cocktailCount(b) -this.cocktailCount(a))\n            let searchArray = sorted.filter(ingredient => ingredient.name.toLowerCase().includes(this.state.searchValue.toLocaleLowerCase()));\n            return searchArray.map(ingObj => <Ingredient currentUser={this.props.currentUser} cocktailCount={this.cocktailCount(ingObj)} ingredient={ingObj} key={ingObj.id} id={ingObj.id} />)\n        } else {\n            let sorted2 = this.props.ingredientsApi.sort((a, b) => this.cocktailCount(b) -this.cocktailCount(a))\n            let searchArray2 = sorted2.filter(ingredient => ingredient.name.toLowerCase().includes(this.state.searchValue.toLocaleLowerCase()));\n            return searchArray2.map(ingObj => <Ingredient currentUser={this.props.currentUser} cocktailCount={this.cocktailCount(ingObj)} ingredient={ingObj} key={ingObj.id} id={ingObj.id} />)\n        }\n    }\n\n    cocktailCount = (ingredient) => {\n        let cocktailMap = this.props.cocktailsApi.map(cocktail => cocktail.cocktail_ingredients)\n        let cocktIngs = cocktailMap.map(obj => obj.map(newObj => newObj.name))\n        let totalCocktails = cocktIngs.filter(obj => obj.includes(ingredient.name))\n        return totalCocktails.length\n      }\n\n\n\n    render() {\n        return (\n            <> {this.props.ingredientsApi.length ? \n            <Container>\n                <Segment textAlign='center' basic padded='very' vertical>\n                    <h2>Ingredients</h2>\n                    <IngredientSearch changeHandler={this.changeHandler} searchValue={this.state.searchValue} />\n                </Segment>\n                <Segment basic padded='very' vertical>\n                    <Card.Group centered>\n                        {this.renderIngredients()}\n                    </Card.Group>\n                </Segment>\n            </Container> : <h2>loading</h2>}\n            </>\n        );\n    }\n}\n\n    function mdp(dispatch){\n        return {\n            fetchIngredients: () => dispatch(getIngredients()),\n            fetchUserIngredients: () =>dispatch(getUserIngredients()),\n            fetchCocktails: () =>dispatch(getCocktails())\n        }\n    }\n    function msp(state){\n        return {\n            currentUser: state.currentUser,\n            ingredientsApi: state.ingredientsApi,\n            userIngApi: state.userIngApi,\n            cocktailsApi: state.cocktailsApi\n        }\n    }\n\nexport default connect(msp, mdp)(AllIngContainer)","/Users/andrea/tendr/tendr-react-frontend/src/Containers/ShoppingListCont.js",[],"/Users/andrea/tendr/tendr-react-frontend/src/Components/Navbar.js",[],"/Users/andrea/tendr/tendr-react-frontend/src/Containers/LogInContainer.js",["148","149","150"],"import React, { Component } from 'react';\nimport { Form, Button, Segment} from 'semantic-ui-react'\nimport SignUpForm from '../Components/SignUpForm';\nimport LogInForm from '../Components/LogInForm'\nimport { connect } from 'react-redux'\n\nclass LogInContainer extends Component {\n\n    render() {\n        return (\n            <div className='login-container' style={{padding: '100px'}}>\n                <LogInForm />\n                <SignUpForm />\n            </div>\n        );\n    }\n}\n\nfunction mapStateToProps(state) {\n    return {\n      currentUser: state.currentUser\n    }\n  }\n\nexport default connect(mapStateToProps)(LogInContainer);","/Users/andrea/tendr/tendr-react-frontend/src/Components/Loading.js",[],"/Users/andrea/tendr/tendr-react-frontend/src/Components/TendrHeader.js",[],{"ruleId":"151","severity":1,"message":"152","line":2,"column":30,"nodeType":"153","messageId":"154","endLine":2,"endColumn":35},{"ruleId":"155","replacedBy":"156"},{"ruleId":"157","replacedBy":"158"},{"ruleId":"151","severity":1,"message":"159","line":2,"column":31,"nodeType":"153","messageId":"154","endLine":2,"endColumn":35},{"ruleId":"151","severity":1,"message":"152","line":2,"column":37,"nodeType":"153","messageId":"154","endLine":2,"endColumn":42},{"ruleId":"151","severity":1,"message":"160","line":2,"column":72,"nodeType":"153","messageId":"154","endLine":2,"endColumn":79},{"ruleId":"151","severity":1,"message":"161","line":2,"column":8,"nodeType":"153","messageId":"154","endLine":2,"endColumn":14},{"ruleId":"151","severity":1,"message":"162","line":13,"column":10,"nodeType":"153","messageId":"154","endLine":13,"endColumn":19},{"ruleId":"151","severity":1,"message":"163","line":2,"column":10,"nodeType":"153","messageId":"154","endLine":2,"endColumn":16},{"ruleId":"151","severity":1,"message":"164","line":2,"column":16,"nodeType":"153","messageId":"154","endLine":2,"endColumn":21},{"ruleId":"151","severity":1,"message":"165","line":2,"column":30,"nodeType":"153","messageId":"154","endLine":2,"endColumn":34},{"ruleId":"151","severity":1,"message":"164","line":2,"column":16,"nodeType":"153","messageId":"154","endLine":2,"endColumn":21},{"ruleId":"155","replacedBy":"166"},{"ruleId":"157","replacedBy":"167"},{"ruleId":"151","severity":1,"message":"168","line":2,"column":24,"nodeType":"153","messageId":"154","endLine":2,"endColumn":29},{"ruleId":"151","severity":1,"message":"152","line":2,"column":31,"nodeType":"153","messageId":"154","endLine":2,"endColumn":36},{"ruleId":"151","severity":1,"message":"169","line":2,"column":50,"nodeType":"153","messageId":"154","endLine":2,"endColumn":55},{"ruleId":"151","severity":1,"message":"162","line":13,"column":10,"nodeType":"153","messageId":"154","endLine":13,"endColumn":19},{"ruleId":"151","severity":1,"message":"170","line":2,"column":10,"nodeType":"153","messageId":"154","endLine":2,"endColumn":20},{"ruleId":"151","severity":1,"message":"162","line":2,"column":18,"nodeType":"153","messageId":"154","endLine":2,"endColumn":27},{"ruleId":"171","severity":1,"message":"172","line":26,"column":31,"nodeType":"173","messageId":"174","endLine":26,"endColumn":33},{"ruleId":"155","replacedBy":"175"},{"ruleId":"157","replacedBy":"176"},{"ruleId":"151","severity":1,"message":"168","line":2,"column":19,"nodeType":"153","messageId":"154","endLine":2,"endColumn":24},{"ruleId":"171","severity":1,"message":"172","line":42,"column":31,"nodeType":"173","messageId":"174","endLine":42,"endColumn":33},{"ruleId":"151","severity":1,"message":"177","line":1,"column":17,"nodeType":"153","messageId":"154","endLine":1,"endColumn":25},{"ruleId":"151","severity":1,"message":"178","line":2,"column":40,"nodeType":"153","messageId":"154","endLine":2,"endColumn":44},{"ruleId":"151","severity":1,"message":"179","line":2,"column":46,"nodeType":"153","messageId":"154","endLine":2,"endColumn":50},{"ruleId":"151","severity":1,"message":"165","line":2,"column":52,"nodeType":"153","messageId":"154","endLine":2,"endColumn":56},{"ruleId":"151","severity":1,"message":"180","line":6,"column":10,"nodeType":"153","messageId":"154","endLine":6,"endColumn":18},{"ruleId":"151","severity":1,"message":"181","line":2,"column":10,"nodeType":"153","messageId":"154","endLine":2,"endColumn":14},{"ruleId":"151","severity":1,"message":"182","line":2,"column":16,"nodeType":"153","messageId":"154","endLine":2,"endColumn":22},{"ruleId":"151","severity":1,"message":"183","line":2,"column":24,"nodeType":"153","messageId":"154","endLine":2,"endColumn":31},"no-unused-vars","'Label' is defined but never used.","Identifier","unusedVar","no-native-reassign",["184"],"no-negated-in-lhs",["185"],"'Item' is defined but never used.","'Divider' is defined but never used.","'Header' is defined but never used.","'Container' is defined but never used.","'Sticky' is defined but never used.","'Input' is defined but never used.","'Icon' is defined but never used.",["184"],["185"],"'Image' is defined but never used.","'Modal' is defined but never used.","'withRouter' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected",["184"],["185"],"'useState' is defined but never used.","'List' is defined but never used.","'Card' is defined but never used.","'Redirect' is defined but never used.","'Form' is defined but never used.","'Button' is defined but never used.","'Segment' is defined but never used.","no-global-assign","no-unsafe-negation"]