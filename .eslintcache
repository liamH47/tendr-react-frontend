[{"/Users/andrea/tendr/tendr-react-frontend/src/Components/SavedCocktailItem.js":"1","/Users/andrea/tendr/tendr-react-frontend/src/Components/UserCocktail.js":"2","/Users/andrea/tendr/tendr-react-frontend/src/Components/CocktailItem.js":"3","/Users/andrea/tendr/tendr-react-frontend/src/Containers/MainContainer.js":"4","/Users/andrea/tendr/tendr-react-frontend/src/Components/Header.js":"5","/Users/andrea/tendr/tendr-react-frontend/src/Components/SignUpForm.js":"6","/Users/andrea/tendr/tendr-react-frontend/src/Components/UserIngredient.js":"7","/Users/andrea/tendr/tendr-react-frontend/src/Components/IngredientSearch.js":"8","/Users/andrea/tendr/tendr-react-frontend/src/Components/Ingredient.js":"9","/Users/andrea/tendr/tendr-react-frontend/src/Components/Cocktail.js":"10","/Users/andrea/tendr/tendr-react-frontend/src/Components/LogInForm.js":"11","/Users/andrea/tendr/tendr-react-frontend/src/Components/ShoppingListItem.js":"12","/Users/andrea/tendr/tendr-react-frontend/src/Redux/rootReducer.js":"13","/Users/andrea/tendr/tendr-react-frontend/src/App.js":"14","/Users/andrea/tendr/tendr-react-frontend/src/Containers/MyIngrContainer.js":"15","/Users/andrea/tendr/tendr-react-frontend/src/Containers/MyCocktailsCont.js":"16","/Users/andrea/tendr/tendr-react-frontend/src/Containers/SavedCocktailsCont.js":"17","/Users/andrea/tendr/tendr-react-frontend/src/Containers/ShoppingListCont.js":"18","/Users/andrea/tendr/tendr-react-frontend/src/Containers/LogInContainer.js":"19","/Users/andrea/tendr/tendr-react-frontend/src/Components/TendrHeader.js":"20","/Users/andrea/tendr/tendr-react-frontend/src/Containers/AllIngContainer.js":"21","/Users/andrea/tendr/tendr-react-frontend/src/Redux/actions.js":"22","/Users/andrea/tendr/tendr-react-frontend/src/Containers/AllCocktails.js":"23","/Users/andrea/tendr/tendr-react-frontend/src/Components/FilterCocktails.js":"24","/Users/andrea/tendr/tendr-react-frontend/src/index.js":"25","/Users/andrea/tendr/tendr-react-frontend/src/Components/Loading.js":"26","/Users/andrea/tendr/tendr-react-frontend/src/Redux/actionTypes.js":"27","/Users/andrea/tendr/tendr-react-frontend/src/reportWebVitals.js":"28"},{"size":12418,"mtime":1610311022000,"results":"29","hashOfConfig":"30"},{"size":910,"mtime":1609103158000,"results":"31","hashOfConfig":"30"},{"size":7907,"mtime":1610403079000,"results":"32","hashOfConfig":"30"},{"size":1881,"mtime":1611685229000,"results":"33","hashOfConfig":"30"},{"size":993,"mtime":1611676530000,"results":"34","hashOfConfig":"30"},{"size":1772,"mtime":1609864824000,"results":"35","hashOfConfig":"30"},{"size":2596,"mtime":1610311022000,"results":"36","hashOfConfig":"30"},{"size":404,"mtime":1610311022000,"results":"37","hashOfConfig":"30"},{"size":2862,"mtime":1610311021000,"results":"38","hashOfConfig":"30"},{"size":4242,"mtime":1610311021000,"results":"39","hashOfConfig":"30"},{"size":1750,"mtime":1610311022000,"results":"40","hashOfConfig":"30"},{"size":1734,"mtime":1610311022000,"results":"41","hashOfConfig":"30"},{"size":3995,"mtime":1609864824000,"results":"42","hashOfConfig":"30"},{"size":2107,"mtime":1611676487000,"results":"43","hashOfConfig":"30"},{"size":2299,"mtime":1610311023000,"results":"44","hashOfConfig":"30"},{"size":1953,"mtime":1610311023000,"results":"45","hashOfConfig":"30"},{"size":1602,"mtime":1610311023000,"results":"46","hashOfConfig":"30"},{"size":1393,"mtime":1610311023000,"results":"47","hashOfConfig":"30"},{"size":964,"mtime":1610311023000,"results":"48","hashOfConfig":"30"},{"size":1613,"mtime":1611684855000,"results":"49","hashOfConfig":"30"},{"size":3635,"mtime":1610311023000,"results":"50","hashOfConfig":"30"},{"size":8668,"mtime":1609864824000,"results":"51","hashOfConfig":"30"},{"size":4846,"mtime":1611680112000,"results":"52","hashOfConfig":"30"},{"size":1404,"mtime":1611686673000,"results":"53","hashOfConfig":"30"},{"size":864,"mtime":1608511277000,"results":"54","hashOfConfig":"30"},{"size":590,"mtime":1610311022000,"results":"55","hashOfConfig":"30"},{"size":830,"mtime":1609724461000,"results":"56","hashOfConfig":"30"},{"size":362,"mtime":1607978006000,"results":"57","hashOfConfig":"30"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"61"},"1wjrw23",{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"68"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"79"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"68"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"85","messages":"86","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"93"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"68"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"102","messages":"103","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104","usedDeprecatedRules":"79"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"68"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"112","messages":"113","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114","usedDeprecatedRules":"79"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"119"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"122"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"125"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/andrea/tendr/tendr-react-frontend/src/Components/SavedCocktailItem.js",["132","133"],"import React, { Component } from 'react';\nimport { Button, Icon, Item, Label, List, Form, Modal, Card, Image, Grid, Segment} from 'semantic-ui-react'\nimport { connect } from 'react-redux'\nimport { getCocktails, getUserIngredients, addToShoppingList, getIngredients, addNote, getSavedCocktails, deleteSavedCocktail, getShoppingList } from '../Redux/actions'\n\nclass SavedCocktailItem extends Component {\n\n    state = {\n        notes: \"\",\n        clicked: false,\n        open: false\n    }\n\n    toggleHandler = () => {\n        this.setState({\n          clicked: !this.state.clicked,\n        })\n      }\n    \n      toggleModal = () => {\n        this.setState({\n          open: !this.state.open,\n        })\n      }\n\n    changeHandler = (e) => {\n        this.setState({ [e.target.name]: e.target.value })\n    }\n\n    componentDidMount() {\n        this.props.fetchSavedCocktails()\n        this.props.fetchIngredients()\n        this.props.fetchUserIngs()\n        this.props.fetchShoppingList()\n        this.setState({ clicked: false, open: false})\n        console.log(\"saved cocktail render props:\", this.props)\n    }\n\n    localSaveHandler = (e) => {\n        e.preventDefault()\n        this.props.localSaveHandler( this.props.savedCocktail.cocktail_id, this.props.currentUser.user.id)\n        console.log(\"hello?\")\n    }\n\n    localDeleteHandler = () => {\n        this.props.localDeleteHandler(this.props.id)\n    }\n\n    localNoteHandler = (e) => {\n        e.preventDefault()\n        let currentNotes = this.props.savedCocktail.notes\n        let newNotes = [...currentNotes, this.state.notes]\n        const updateObj = {\n            id: this.props.id,\n            user_id: this.props.savedCocktail.user_id,\n            cocktail_id: this.props.savedCocktail.cocktail_id,\n            notes: newNotes,\n            user: this.props.savedCocktail.user,\n            cocktail: this.props.savedCocktail.cocktail\n        }\n        this.props.addNewNote(updateObj)\n        e.target.reset()\n    }\n    \n    ingredientCheck = (name) => {\n        let ingNames = this.props.userIngApi.map(ingredient => ingredient.name)\n        let shoppingNames = this.props.shoppingListApi.map(ing => ing.ingredient.name)\n        if(ingNames.includes(name)) {\n            return <Icon color='green' size='big' name='check circle' />\n        }else if(shoppingNames.includes(name)){\n            return <Icon color='blue' size='big' name='shopping cart'/>\n        }else{\n            return <Icon color='red' size='big' name='exclamation circle' />\n        }\n    }\n\n    howManyIngs = (cocktailObj) => {\n        let cocktail = cocktailObj.cocktail_ingredients\n        let ingNames = this.props.userIngApi.map(ingredient => ingredient.name)\n        let hasThis = cocktail.filter((ing) => ingNames.includes(ing.name))\n        let missingIngCount = cocktail.length - hasThis.length\n        if(missingIngCount >= 1){\n            return `You are missing ${missingIngCount} ingredients `\n        } else {\n            return 'You have all the Ingredients!'\n        }\n    }\n\n    renderIngTable = () => {\n        let cocktIngs = this.props.cocktail.cocktail_ingredients\n        return cocktIngs.map((ingredient, index) => {\n            const { name, unit, quantity } = ingredient\n            return(\n                <List.Item floated='left'>\n                    <List.Content floated='left'>\n                        {this.ingredientCheck(name)} {quantity} {unit} {name} \n                    </List.Content>\n                </List.Item>\n            )\n        })\n    }\n\n    render() {\n        // const { savedCocktail } = this.props.savedCocktail\n        return (\n            <Card>\n                <Image bordered src={this.props.savedCocktail.cocktail.image_url}/>\n                <Card.Content>\n                    {this.props.savedCocktail.cocktail.name}\n                </Card.Content>\n                <Card.Content extra>\n                <Modal className='cocktail-modal'\n                            size='large'\n                            closeIcon\n                            onClose={() => this.toggleModal()}\n                            onOpen={() => this.toggleModal()}\n                            open={this.state.open}\n                            trigger={\n                                <Button\n                                content='Learn More'\n                                positive\n                                onClick={() => {\n                                    this.toggleModal();\n                                }}\n                                />\n                            }>\n                            <Modal.Header textAlign='center' >\n                                <h3>{this.props.savedCocktail.cocktail.name}</h3>\n                            </Modal.Header>\n                                <Segment>\n                                    <Grid columns={4} stackable>\n                                        <Grid.Column width={7} >\n                                            <Image src={this.props.savedCocktail.cocktail.image_url} alt={this.props.savedCocktail.cocktail.name} size='large' rounded floated='left' />\n                                        </Grid.Column>\n                                        <Grid.Column className='cocktail-column' width={3}>\n                                            <List relaxed  verticalAlign='left'>\n                                                <List.Item><strong>Category:</strong> {this.props.savedCocktail.cocktail.category}</List.Item>\n                                                <List.Item><strong>Glass:</strong>{this.props.savedCocktail.cocktail.recommended_glass}</List.Item>\n                                                <List.Item><strong>Ice:</strong>{this.props.savedCocktail.cocktail.recommended_ice}</List.Item>\n                                                <List.Item><strong>Garnish:</strong>{this.props.savedCocktail.cocktail.garnish}</List.Item>\n                                            </List>\n                                            <List relaxed bulleted floated='left' verticalAlign='bottom'>\n                                                <List.Header><strong>Recipe</strong></List.Header>\n                                                {this.props.savedCocktail.cocktail.instructions.map(element => <List.Item floated='left'><List.Content floated='left'>{element}</List.Content></List.Item>)}\n                                            </List>\n                                            {/* <Label>Category: {cocktail.category}</Label>\n                                            <Label>{this.howManyIngs(this.props.cocktail)}</Label> */}\n                                        </Grid.Column>\n                                        <Grid.Column className='cocktail-column' width={3}>\n            \n                                            <List animated relaxed='very' verticalAlign='left'>\n                                                <List.Header textAlign='center'>{this.howManyIngs(this.props.cocktail)}</List.Header>\n                                                {this.renderIngTable()}\n                                            </List>\n\n                                        </Grid.Column > \n                                        <Grid.Column className='cocktail-column' width={3}>\n                                            <List verticalAlign='middle' bulleted floated='right'>\n                                                <List.Header>My Notes</List.Header>\n                                                {this.props.savedCocktail.notes.map(element => <List.Item floated='left'><List.Content floated='left'>{element}</List.Content></List.Item>)}\n                                            </List>     \n                                            <Form onSubmit={this.localNoteHandler}>\n                                                <Form.Field>\n                                                    <label>Notes</label>\n                                                    <input type='text' name='notes' value={this.state.notes} onChange={this.changeHandler} placeholder='your notes' />\n                                                </Form.Field>\n                                                <Button type='submit'>Add Note</Button>\n                                            </Form>                                                                                   \n                                        </Grid.Column>\n                                    </Grid>\n                                </Segment>\n                            {/* </Modal.Content> */}\n                            \n                            {/* <Modal.Actions>\n                                <Button color=\"red\" onClick={() => this.toggleModal()}>Exit</Button>\n                            </Modal.Actions> */}\n                        </Modal>\n                    <Button negative color='red' onClick={this.localDeleteHandler} content='Remove' />\n                </Card.Content>\n            </Card>\n            // <Item padded='very'>\n            //     <Item.Image rounded size='large' floated='left' src={this.props.savedCocktail.cocktail.image_url} />\n            //     <Item.Content floated='left'>\n            //         <Item.Header className='cocktail-item-header' floated='left'><h1>{this.props.savedCocktail.cocktail.name}</h1></Item.Header>\n            //         <Item.Meta>{this.props.savedCocktail.cocktail.category}</Item.Meta>\n            //         <Item.Description>{this.howManyIngs(this.props.savedCocktail.cocktail)}</Item.Description>\n            //         <List animated verticalAlign='middle'>\n            //             {/* <List.Header floated='left'>Ingredients</List.Header> */}\n            //             {this.renderIngTable()}\n            //         </List>\n            //         <Item.Description>Glass: {this.props.savedCocktail.cocktail.recommended_glass} </Item.Description>\n            //         <Item.Description>Ice: {this.props.savedCocktail.cocktail.recommended_ice} </Item.Description>\n            //         <List ordered floated='left'>\n            //             <List.Header floated='left'>Instructions</List.Header>\n            //             {this.props.savedCocktail.cocktail.instructions.map(element => <List.Item floated='left'><List.Content floated='left'>{element}</List.Content></List.Item>)}\n            //         </List>\n            //     </Item.Content>\n            //     <Item.Content floated='right'>\n                    // <List verticalAlign='middle' bulleted floated='right'>\n                    //     <List.Header>My Notes</List.Header>\n                    //     {this.props.savedCocktail.notes.map(element => <List.Item floated='left'><List.Content floated='left'>{element}</List.Content></List.Item>)}\n                    // </List>\n                    // <Form onSubmit={this.localNoteHandler}>\n                    //     <Form.Field>\n                    //         <label>Notes</label>\n                    //         <input type='text' name='notes' value={this.state.notes} onChange={this.changeHandler} placeholder='your notes' />\n                    //     </Form.Field>\n                    //     <Button type='submit'>Add Note</Button>\n                    // </Form>\n                        \n            //         <Button verticalAlign='bottom' onClick={this.localDeleteHandler}>Remove From Saved Cocktails</Button>\n            //     </Item.Content>\n            // </Item>\n        );\n    }\n}\nfunction mdp(dispatch){\n    return{\n        fetchIngredients: () => dispatch(getIngredients()),\n        fetchCocktails: () => dispatch(getCocktails()),\n        fetchUserIngs: () => dispatch(getUserIngredients()),\n        localListHandler: (ingredient) => dispatch(addToShoppingList(ingredient)),\n        fetchSavedCocktails: () => dispatch(getSavedCocktails()),\n        addNewNote: (updateObj) => dispatch(addNote(updateObj)),\n        localDeleteHandler: (id) => dispatch(deleteSavedCocktail(id)),\n        localSaveHandler: (ingredient) => dispatch(addToShoppingList(ingredient)),\n        fetchShoppingList: () => dispatch(getShoppingList()) \n    }\n}\n\nfunction msp(state){\n    return {\n        currentUser: state.currentUser,\n        userIngApi: state.userIngApi,\n        cocktailsApi: state.cocktailsApi,\n        savedCocktails: state.savedCocktails,\n        shoppingListApi: state.shoppingListApi\n    }\n}\n\nexport default connect(msp, mdp)(SavedCocktailItem);",["134","135"],"/Users/andrea/tendr/tendr-react-frontend/src/Components/UserCocktail.js",[],["136","137"],"/Users/andrea/tendr/tendr-react-frontend/src/Components/CocktailItem.js",["138","139","140"],"import React, { Component } from 'react';\nimport { Button, Icon, Image, Item, Label, List, Modal, Segment, Grid, Divider, Card} from 'semantic-ui-react'\nimport { connect } from 'react-redux'\nimport { getCocktails, getUserIngredients, addToShoppingList, getIngredients, saveCocktail, getShoppingList } from '../Redux/actions'\n\nclass CocktailItem extends Component {\n\n    state = {\n        clicked: false,\n        open: false\n      }\n    \n      toggleHandler = () => {\n        this.setState({\n          clicked: !this.state.clicked,\n        })\n      }\n    \n      toggleModal = () => {\n        this.setState({\n          open: !this.state.open,\n        })\n      }\n\n    componentDidMount() {\n        this.props.fetchIngredients()\n        this.props.fetchUserIngs()\n        this.props.fetchShoppingList()\n        // console.log(this.props.currentUser)\n        this.setState({ clicked: false, open: false})\n        // debugger\n    }\n\n\n    localSaveHandler = (e) => {\n        e.preventDefault()\n        this.props.localSaveHandler( this.props.cocktail.id, this.props.currentUser.user.id)\n    }\n\n    // localListHandler = (e) => {\n    //     e.preventDefault()\n    //     this.props.localListHandler({\n    //         ingredient_id: this.props.ingredient.id,\n    //         user_id: this.props.currentUser.user.id\n    //     })\n\n    // }\n    //need to find the id of the ingredient whose name matches \n\n    clickHandler = () => {\n        console.log(\"click\")\n    }\n    \n    ingredientCheck = (name) => {\n        let ingNames = this.props.userIngApi.map(ingredient => ingredient.name)\n        let shoppingNames = this.props.shoppingListApi.map(ing => ing.ingredient.name)\n        if(ingNames.includes(name)) {\n            return <Icon color='green' size='big' name='check circle' />\n        }else if(shoppingNames.includes(name)){\n            return <Icon color='blue' size='big' name='shopping cart'/>\n        }else{\n            return <Icon color='red' size='big' name='exclamation circle' />\n        }\n    }\n\n    howManyIngs = (cocktailObj) => {\n        let cocktail = cocktailObj.cocktail_ingredients\n        let ingNames = this.props.userIngApi.map(ingredient => ingredient.name)\n        let hasThis = cocktail.filter((ing) => ingNames.includes(ing.name))\n        let missingIngCount = cocktail.length - hasThis.length\n        if(missingIngCount >= 1){\n            return `You are missing ${missingIngCount} ingredients `\n        } else {\n            return 'You have all the Ingredients!'\n        }\n    }\n\n    renderIngTable = () => {\n        let cocktIngs = this.props.cocktail.cocktail_ingredients\n        return cocktIngs.map((ingredient, index) => {\n            const { name, unit, quantity } = ingredient\n            return(\n                <List.Item floated='left'>\n                    <List.Content floated='left'>\n                        {this.ingredientCheck(name)} {quantity} {unit} {name} \n                    </List.Content>\n                </List.Item>\n            )\n        })\n    }\n\n    render() {\n        const { cocktail } = this.props\n        return (\n                <Card>\n                    <Image className='cocktail-image' bordered src ={cocktail.image_url} />\n                    <Card.Content>\n                        {cocktail.name}\n                    </Card.Content>\n                    <Card.Content extra>\n                        <Button color='blue' onClick={this.localSaveHandler} content='Save Cocktail' />\n                        <Modal className='cocktail-modal'\n                            size='large'\n                            closeIcon\n                            onClose={() => this.toggleModal()}\n                            onOpen={() => this.toggleModal()}\n                            open={this.state.open}\n                            trigger={\n                                <Button\n                                content='Learn More'\n                                positive\n                                onClick={() => {\n                                    this.toggleModal();\n                                }}\n                                />\n                            }>\n                            <Modal.Header textAlign='center' >\n                                <h3>{cocktail.name}</h3>\n                            </Modal.Header>\n                                <Segment>\n                                    <Grid columns={3} stackable>\n                                        <Grid.Column width={8} >\n                                            <Image src={cocktail.image_url} alt={cocktail.name} size='large' rounded floated='left' />\n                                        </Grid.Column>\n                                        <Grid.Column className='cocktail-column' width={3}>\n                                            <List relaxed verticalAlign='left'>\n                                                <List.Item><strong>Category:</strong> {cocktail.category}</List.Item>\n                                                <List.Item><strong>Glass:</strong> {cocktail.recommended_glass}</List.Item>\n                                                <List.Item><strong>Ice:</strong> {cocktail.recommended_ice}</List.Item>\n                                                <List.Item><strong>Garnish:</strong> {cocktail.garnish}</List.Item>\n                                            </List>\n                                            <List relaxed bulleted floated='left' verticalAlign='bottom'>\n                                                <List.Header><strong>Recipe</strong></List.Header>\n                                                {cocktail.instructions.map(element => <List.Item floated='left'><List.Content floated='left'>{element}</List.Content></List.Item>)}\n                                            </List>\n                                            {/* <Label>Category: {cocktail.category}</Label>\n                                            <Label>{this.howManyIngs(this.props.cocktail)}</Label> */}\n                                        </Grid.Column>\n                                        <Grid.Column className='cocktail-column' width={5}>\n            \n                                            <List animated relaxed='very' verticalAlign='left'>\n                                                <List.Header textAlign='center'>{this.howManyIngs(this.props.cocktail)}</List.Header>\n                                                {this.renderIngTable()}\n                                            </List>\n                                            <Button attached='bottom' color='green' onClick={this.localSaveHandler}>Add to Saved Cocktails</Button>\n                                        </Grid.Column>\n                                    </Grid>\n                                </Segment>\n                            {/* </Modal.Content> */}\n                            \n                            {/* <Modal.Actions>\n                                <Button color=\"red\" onClick={() => this.toggleModal()}>Exit</Button>\n                            </Modal.Actions> */}\n                        </Modal>\n                    </Card.Content>\n                </Card>\n\n        );\n    }\n}\nfunction mdp(dispatch){\n    return{\n        fetchIngredients: () => dispatch(getIngredients()),\n        fetchCocktails: () => dispatch(getCocktails()),\n        fetchUserIngs: () => dispatch(getUserIngredients()),\n        localListHandler: (ingredient) => dispatch(addToShoppingList(ingredient)),\n        localSaveHandler: (cocktailId, userId) => dispatch(saveCocktail(cocktailId, userId)),\n        fetchShoppingList: () => dispatch(getShoppingList()) \n    }\n}\n\nfunction msp(state){\n    return {\n        currentUser: state.currentUser,\n        userIngApi: state.userIngApi,\n        cocktailsApi: state.cocktailsApi,\n        shoppingListApi: state.shoppingListApi\n    }\n}\n\nexport default connect(msp, mdp)(CocktailItem);\n\n\n",["141","142"],"/Users/andrea/tendr/tendr-react-frontend/src/Containers/MainContainer.js",["143","144"],"import React, { Component } from 'react';\nimport Header from '../Components/Header'\nimport { Route, Switch, withRouter } from 'react-router-dom'\nimport MyIngrContainer from './MyIngrContainer'\nimport SavedCocktailsCont from './SavedCocktailsCont'\nimport AllIngContainer from './AllIngContainer'\nimport MyCocktailsCont from './MyCocktailsCont'\nimport ShoppingListCont from './ShoppingListCont'\nimport LogInContainer from './LogInContainer';\nimport AllCocktails from './AllCocktails'\nimport { loggedIn } from '../Redux/actions'\nimport { connect } from 'react-redux'\nimport { Container } from 'semantic-ui-react'\n\nclass MainContainer extends Component {\n\n    state = {\n        user: null\n    }\n\n    render() {\n        return (\n            <div className='main-content'>\n                {/* <Header /> */}\n                <Switch>\n                    <Route path='/welcome' render={() => <LogInContainer />} />\n                    <Route path='/my_ingredients' render={() => <MyIngrContainer />} />\n                    <Route path='/find_ingredients' render={() => <AllIngContainer />} />\n                    <Route path='/my_cocktails' render={() => <MyCocktailsCont />} />\n                    <Route path='/explore_cocktails' render={() => <AllCocktails />}/>\n                    <Route path='/shopping_list' render={() => <ShoppingListCont />}/>\n                    <Route path='/saved_cocktails' render={() => <SavedCocktailsCont />} />\n                    <Route path='*' component={LogInContainer} />\n                </Switch>               \n\n            </div>\n        );\n    }\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        fetchCurrentUser: () => dispatch(loggedIn())\n    }\n}\n\nfunction mapStateToProps(state) {\n    return {\n        currentUser: state.currentUser\n    }\n}\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(MainContainer));","/Users/andrea/tendr/tendr-react-frontend/src/Components/Header.js",["145"],"/Users/andrea/tendr/tendr-react-frontend/src/Components/SignUpForm.js",[],"/Users/andrea/tendr/tendr-react-frontend/src/Components/UserIngredient.js",["146"],"import React, { Component } from 'react';\nimport {Card, Image, Button, Icon} from 'semantic-ui-react'\nimport { connect } from 'react-redux'\nimport { deleteIngredient } from '../Redux/actions'\n\nclass UserIngredient extends Component {\n\n    // state = {\n    //     running_low: this.props.ingredient.running_low\n    // }\n    \n    localDeleteHandler = () => {\n        this.props.localDeleteHandler(this.props.id)\n    }\n\n    // componentDidMount() {\n    //     this.setState({ running_low: this.props.ingredient.running_low})\n    // }\n\n    // checkRunLow = () => {\n    //     if(this.state.running_low) {\n    //         return \"Mark fully stocked\"\n    //     } else {\n    //         return \"Running Low?\"\n    //     }\n    // }\n\n    // showStock = () => {\n    //     if(this.state.running_low) {\n    //         return <Icon color='red' size='big' name='exclamation circle' />\n    //     } else {\n    //         return <Icon color='green' size='big' name='check circle' />\n    //     }\n    // }\n    \n    // handleRunLow = () => {\n    //     fetch(`http://localhost:3000/api/v1/user_ingredients/${this.props.id}`, {\n    //         method: 'PATCH',\n    //         headers: {\n    //             \"Content-Type\": \"application/json\",\n    //             \"Accepts\": \"application/json\"\n    //         },\n    //         body: JSON.stringify({...this.props.ingredient, running_low: !this.state.running_low})\n    //     })\n    //     .then(r => r.json())\n    //     .then(ingredient => {this.setState({ running_low: ingredient.running_low})})\n    //     .catch(console.log)\n        \n    // }\n\n    render() {\n        const {ingredient} = this.props\n        return (\n            <Card>\n                <Image src={ingredient.image_url} />\n                <Card.Content>\n                    <Card.Header>{ingredient.name}</Card.Header>\n                    <Card.Description>In {this.props.cocktailCount} cocktails</Card.Description>\n                    {/* <Card.Content>Stock: {this.showStock()}</Card.Content> */}\n                </Card.Content>\n                <Card.Content extra>\n\n                <Button \n                    negative\n                    content='remove from ingredients'\n                    onClick={this.localDeleteHandler}\n                    />\n                    </Card.Content>\n            </Card>\n        );\n    }\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {localDeleteHandler: (id) => dispatch(deleteIngredient(id))}\n}\n\nfunction mapStateToProps(state){\n    return {userIngApi: state.userIngApi}\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(UserIngredient); ",["147","148"],"/Users/andrea/tendr/tendr-react-frontend/src/Components/IngredientSearch.js",["149"],"import React from 'react';\nimport { Form, Input } from 'semantic-ui-react'\n\nconst IngredientSearch = ({ searchValue, changeHandler }) => {\n    return(\n        <div className='search-form'>\n            <Form >\n                <Form.Input  type=\"text\" value={searchValue} onChange={changeHandler} placeholder=\"search by name\" />\n            </Form>\n        </div>\n    ) \n\n}\n\nexport default IngredientSearch","/Users/andrea/tendr/tendr-react-frontend/src/Components/Ingredient.js",[],"/Users/andrea/tendr/tendr-react-frontend/src/Components/Cocktail.js",["150","151","152"],"/Users/andrea/tendr/tendr-react-frontend/src/Components/LogInForm.js",[],"/Users/andrea/tendr/tendr-react-frontend/src/Components/ShoppingListItem.js",[],"/Users/andrea/tendr/tendr-react-frontend/src/Redux/rootReducer.js",[],["153","154"],"/Users/andrea/tendr/tendr-react-frontend/src/App.js",["155","156"],"import React from 'react';\nimport './App.css';\n// import MyIngrContainer from './Containers/MyIngrContainer'\n// import SavedCocktailsCont from './Containers/SavedCocktailsCont'\n// import AllIngContainer from './Containers/AllIngContainer'\n// import MyCocktailsCont from './Containers/MyCocktailsCont'\n// import ShoppingListCont from './Containers/ShoppingListCont'\n// import LogInContainer from './Containers/LogInContainer';\n// import AllCocktails from './Containers/AllCocktails'import Header from './Components/Header'\nimport Header from './Components/Header'\nimport { BrowserRouter } from 'react-router-dom'\n// import Navbar from './Components/Navbar'\nimport { Container } from 'semantic-ui-react'\n// import { connect } from 'react-redux'\n// import { loggedIn } from './Redux/actions'\nimport MainContainer from './Containers/MainContainer'\nimport TendrHeader from './Components/TendrHeader';\n\nclass App extends React.Component {\n\n\n  \n  \n  render() {\n\n    return (\n      <div className=\"App\">\n          {/* <Header />\n        <Switch>\n          <Route path='/my_ingredients' render={() => <MyIngrContainer />} />\n          <Route path='/find_ingredients' render={() => <AllIngContainer />} />\n          <Route path='/my_cocktails' render={() => <MyCocktailsCont />} />\n          <Route path='/explore_cocktails' render={() => <AllCocktails />}/>\n          <Route path='/shopping_list' render={() => <ShoppingListCont />}/>\n          <Route path='/welcome' render={() => <LogInContainer />} />\n          <Route path='/saved_cocktails' render={() => <SavedCocktailsCont />} />\n        </Switch> */}\n          <BrowserRouter>\n            <div className='main'>\n              <TendrHeader />\n              {/* <Header /> */}\n              <MainContainer />\n            </div>\n          </BrowserRouter>\n      </div>\n    );\n  }\n  }\n\n// function mapDispatchToProps(dispatch) {\n//   return {\n//     fetchCurrentUser: () => dispatch(loggedIn())\n//   }\n// }\n\n// function mapStateToProps(state) {\n//   return {\n//     currentUser: state.currentUser\n//   }\n// }\n\nexport default App;\n// connect(mapStateToProps)(App)","/Users/andrea/tendr/tendr-react-frontend/src/Containers/MyIngrContainer.js",["157"],"import React, { Component } from 'react';\nimport { withRouter } from 'react-router-dom';\nimport {Segment, Container, Card} from 'semantic-ui-react'\nimport UserIngredient from '../Components/UserIngredient';\nimport { connect } from 'react-redux'\nimport {getUserIngredients, getCocktails} from '../Redux/actions'\n\nclass MyIngrContainer extends Component {\n\n      componentDidMount() {\n        this.props.fetchUserIngredients()\n        this.props.fetchCocktails()\n        // debugger\n      }\n        \n        renderMyIngredients = () => {\n            let filtered = this.props.userIngApi.filter(ingredient => ingredient.user_id === this.props.currentUser.user.id)\n            let sorted = filtered.sort((a, b) => this.cocktailCount(b) -this.cocktailCount(a))\n            return sorted.map(ingObj => <UserIngredient cocktailCount={this.cocktailCount(ingObj)} key={ingObj.id} ingredient={ingObj} id={ingObj.id} category={ingObj.category} name={ingObj.name} image_url={ingObj.image_url} />)\n        }\n\n        cocktailCount = (ingredient) => {\n            let cocktailMap = this.props.cocktailsApi.map(cock => cock.cocktail_ingredients)\n            let cocktIngs = cocktailMap.map(obj => obj.map(newObj => newObj.name))\n            let totalCocktails = cocktIngs.filter(obj => obj.includes(ingredient.name))\n            return totalCocktails.length\n          }\n        \n        render() {\n            return (\n                <> {this.props.userIngApi.length ?                 \n                <Container>\n                    <Segment basic padded='very' vertical>\n                        <h2>Current Ingredients</h2>\n                        <Card.Group centered>\n                        {this.renderMyIngredients()}\n                        </Card.Group>\n                    </Segment>\n                </Container>\n                    : <h2>loading</h2>\n                    }\n                </>\n            );\n        }\n}\n\nfunction mdp(dispatch){\n    return {\n        fetchUserIngredients: () => dispatch(getUserIngredients()),\n        fetchCocktails: () => dispatch(getCocktails())\n    }\n}\nfunction msp(state){\n    return {\n        currentUser: state.currentUser,\n        userIngApi: state.userIngApi,\n        cocktailsApi: state.cocktailsApi\n    }\n}\n\nexport default connect(msp, mdp)(MyIngrContainer)\n\n","/Users/andrea/tendr/tendr-react-frontend/src/Containers/MyCocktailsCont.js",["158","159"],"/Users/andrea/tendr/tendr-react-frontend/src/Containers/SavedCocktailsCont.js",["160"],"import React, { Component } from 'react';\nimport { connect } from 'react-redux'\nimport { getSavedCocktails } from '../Redux/actions'\nimport SavedCocktailItem from '../Components/SavedCocktailItem'\nimport { Segment, Item, Card, Container } from 'semantic-ui-react'\n\nclass SavedCocktailsCont extends Component {\n\n    componentDidMount() {\n        this.props.fetchSavedCocktails()\n        // debugger\n    }\n\n    renderCocktails = () => {\n        console.log(\"in renderCocktails:\", this.props.savedCocktails)\n        let id = this.props.currentUser.user.id\n        let filtered = this.props.savedCocktails.filter(cocktail => cocktail.user_id === id)\n        return filtered.map(tailObj => <SavedCocktailItem key={tailObj.id} id={tailObj.id} savedCocktail={tailObj} cocktail={tailObj.cocktail} />)\n    }\n    \n\n    render() {\n        return(\n        <>\n        {this.props.savedCocktails.length ? \n        <Container textAlign='center'>\n\n        <Segment basic padded='very' vertical>\n            <h2 className='content-header'>Saved Cocktails</h2>\n            <Card.Group className='card-group' centered >\n                {this.renderCocktails()}\n            </Card.Group>\n        </Segment>\n        </Container>\n        : <h2>loading</h2>}\n        </>\n        )\n    }\n}\n\n    function mdp(dispatch){\n        return{\n            fetchSavedCocktails: () => dispatch(getSavedCocktails())\n        }\n    }\n\n    function msp(state){\n        return {\n            currentUser: state.currentUser,\n            savedCocktails: state.savedCocktails\n        }\n    }\n\nexport default connect(msp, mdp)(SavedCocktailsCont);","/Users/andrea/tendr/tendr-react-frontend/src/Containers/ShoppingListCont.js",[],"/Users/andrea/tendr/tendr-react-frontend/src/Containers/LogInContainer.js",["161","162","163"],"import React, { Component } from 'react';\nimport { Form, Button, Segment, Divider, Header} from 'semantic-ui-react'\nimport SignUpForm from '../Components/SignUpForm';\nimport LogInForm from '../Components/LogInForm'\nimport { connect } from 'react-redux'\n\nclass LogInContainer extends Component {\n\n    render() {\n        return (\n            <div className='login-container' style={{padding: '100px'}}>\n                <Header size='medium' textAlign='center' content='Log in' />\n                <LogInForm />\n                {/* <Segment> */}\n                <>\n                <Divider horizontal>Or</Divider>\n                </>\n                <Header size='medium' textAlign='center' content='Sign Up' />\n                {/* </Segment> */}\n                <SignUpForm />\n            </div>\n        );\n    }\n}\n\nfunction mapStateToProps(state) {\n    return {\n      currentUser: state.currentUser\n    }\n  }\n\nexport default connect(mapStateToProps)(LogInContainer);","/Users/andrea/tendr/tendr-react-frontend/src/Components/TendrHeader.js",[],"/Users/andrea/tendr/tendr-react-frontend/src/Containers/AllIngContainer.js",["164"],"import React, { Component } from 'react';\nimport { Segment, Card, Container } from 'semantic-ui-react'\nimport Ingredient from '../Components/Ingredient'\nimport { connect } from 'react-redux'\nimport {getIngredients, getUserIngredients, getCocktails} from '../Redux/actions'\nimport { Redirect } from 'react-router-dom'\nimport IngredientSearch from '../Components/IngredientSearch'\nimport Loading from '../Components/Loading'\n\nclass AllIngContainer extends Component {\n\n    state =  {\n        searchValue: \"\",\n        // categories: []\n    }\n\n    changeHandler = (e) => {\n        this.setState({ searchValue: e.target.value })\n    }\n \n    componentDidMount() {\n            this.props.fetchIngredients()\n            this.props.fetchUserIngredients()\n            this.props.fetchCocktails()\n            // debugger\n    }\n\n    // setCategories = () => {\n    //     let \n    // }\n\n    renderIngredients = () => {\n        if(this.props.userIngApi.length > 0) {\n            let ids = this.props.userIngApi.map(obj => obj.ingredient_id)\n            let ingredients = this.props.ingredientsApi\n            let filtered = ingredients.filter((obj) => !ids.includes(obj.id))\n            let sorted = filtered.sort((a, b) => this.cocktailCount(b) -this.cocktailCount(a))\n            let searchArray = sorted.filter(ingredient => ingredient.name.toLowerCase().includes(this.state.searchValue.toLocaleLowerCase()));\n            return searchArray.map(ingObj => <Ingredient currentUser={this.props.currentUser} cocktailCount={this.cocktailCount(ingObj)} ingredient={ingObj} key={ingObj.id} id={ingObj.id} />)\n        } else {\n            let sorted2 = this.props.ingredientsApi.sort((a, b) => this.cocktailCount(b) -this.cocktailCount(a))\n            let searchArray2 = sorted2.filter(ingredient => ingredient.name.toLowerCase().includes(this.state.searchValue.toLocaleLowerCase()));\n            return searchArray2.map(ingObj => <Ingredient currentUser={this.props.currentUser} cocktailCount={this.cocktailCount(ingObj)} ingredient={ingObj} key={ingObj.id} id={ingObj.id} />)\n        }\n    }\n\n    cocktailCount = (ingredient) => {\n        let cocktailMap = this.props.cocktailsApi.map(cocktail => cocktail.cocktail_ingredients)\n        let cocktIngs = cocktailMap.map(obj => obj.map(newObj => newObj.name))\n        let totalCocktails = cocktIngs.filter(obj => obj.includes(ingredient.name))\n        return totalCocktails.length\n      }\n\n\n    render() {\n        return (\n            <> {this.props.ingredientsApi.length ? \n            <Container>\n                <Segment textAlign='center' basic padded='very' vertical>\n                    <h2>Ingredients</h2>\n                    <IngredientSearch changeHandler={this.changeHandler} searchValue={this.state.searchValue} />\n                </Segment>\n                <Segment basic padded='very' vertical>\n                    <Card.Group className='card-group' centered>\n                        {this.renderIngredients()}\n                    </Card.Group>\n                </Segment>\n            </Container> : <Loading />}\n            </>\n        );\n    }\n}\n\n    function mdp(dispatch){\n        return {\n            fetchIngredients: () => dispatch(getIngredients()),\n            fetchUserIngredients: () =>dispatch(getUserIngredients()),\n            fetchCocktails: () =>dispatch(getCocktails())\n        }\n    }\n    function msp(state){\n        return {\n            currentUser: state.currentUser,\n            ingredientsApi: state.ingredientsApi,\n            userIngApi: state.userIngApi,\n            cocktailsApi: state.cocktailsApi\n        }\n    }\n\nexport default connect(msp, mdp)(AllIngContainer)","/Users/andrea/tendr/tendr-react-frontend/src/Redux/actions.js",[],"/Users/andrea/tendr/tendr-react-frontend/src/Containers/AllCocktails.js",["165","166","167","168"],"import React, { Component } from 'react';\nimport { Segment, Image, Card, Container, Divider, Dropdown} from 'semantic-ui-react'\nimport { connect } from 'react-redux'\nimport { getUserIngredients, getCocktails} from '../Redux/actions'\nimport FilterCocktails from '../Components/FilterCocktails'\nimport CocktailItem from '../Components/CocktailItem'\nimport Loading from '../Components/Loading'\n\nclass AllCocktails extends Component {\n\n    state =  {\n        searchValue: \"\",\n        currentCat: \"All\",\n        categoryOptions: []\n    }\n\n    changeHandler = (e) => {\n        this.setState({ searchValue: e.target.value })\n    }\n\n    categoryHandler = (e) => {\n        this.setState({currentCat: e.target.value})\n    }\n\n    setCategories = () => {\n        //do logic from the FilterCocktails component here.  Make sure there is an 'all' being added to categoryOptions being passed down.\n        let allCats = this.props.cocktailsApi.map(cocktail => cocktail.category)\n        let uniqueCats = [...new Set(allCats)]\n        let defaultCat = [\"All\"]\n        let catObj = defaultCat.concat(uniqueCats)\n        let selectionsObj = uniqueCats.map(category => ({ key: category, text: category, value: category }))\n        this.setState({ categoryOptions: selectionsObj})\n    }\n\n    renderAllCocktails = () => {\n        let sorted = this.props.cocktailsApi.sort((a, b) => this.howManyIngs(a) - this.howManyIngs(b))\n        let searchArray = sorted.filter(cocktail => cocktail.name.toLowerCase().includes(this.state.searchValue.toLowerCase()))\n        if(this.state.currentCat === \"All\"){\n            // let filtered = searchArray.filter(cocktail => cocktail.category.includes(this.state.currentCat))\n            return searchArray.map(tailObj => <CocktailItem name={tailObj.name} image_url={tailObj.image_url} cocktail={tailObj} id={tailObj.id} key={tailObj.id} />)\n        } else {\n            let filtered = searchArray.filter(cocktail => cocktail.category.includes(this.state.currentCat))\n            return filtered.map(tailObj => <CocktailItem name={tailObj.name} image_url={tailObj.image_url} cocktail={tailObj} id={tailObj.id} key={tailObj.id} />)\n        }\n    }\n\n    componentDidMount() {\n        this.props.fetchCocktails()\n        this.setCategories()\n        // console.log(this.props.currentUser)\n        // debugger\n    }\n\n\n    \n    renderMyCocktails = () => {\n        let filtered = this.props.cocktailsApi.filter(el => this.checkCanMake(el, this.props.userIngApi) === true)\n        return filtered.map(tailObj => <CocktailItem name={tailObj.name} image_url={tailObj.image_url} cocktail={tailObj} id={tailObj.id} key={tailObj.id} />)\n    }\n    \n    howManyIngs = (cocktailObj) => {\n        let cocktail = cocktailObj.cocktail_ingredients\n        let ingNames = this.props.userIngApi.map(ingredient => ingredient.name)\n        let hasThis = cocktail.filter((ing) => ingNames.includes(ing.name))\n        return cocktail.length - hasThis.length\n    }\n    \n    checkCanMake(singleCockt, userIngApi) {\n        let cocktail = singleCockt.cocktail_ingredients\n        return cocktail.every(function(ing) {\n            return userIngApi.some(function(ing2) {\n                return (ing.name == ing2.name) && (ing.quantity <= ing2.quantity) \n            })\n        })\n    }\n    \n    render() {\n        return (\n            <> {this.props.cocktailsApi.length ? \n                <Container className='cocktails-container' textAlign='center'>\n                    <Segment textAlign='center' basic padded='very' vertical>\n                        <FilterCocktails changeHandler={this.changeHandler} searchValue={this.state.searchValue} categoryHandler={this.categoryHandler} categoryOptions={this.state.categoryOptions} currentCat={this.state.currentCat} />\n                    </Segment>\n                        <h2 className='content-header'>All Cocktails</h2>\n                        <Card.Group className='card-group' centered >\n                            {this.renderAllCocktails()}\n                        </Card.Group>\n                        <>\n                        <Divider horizontal></Divider>\n                        </>\n                        <h2 className='content-header'>Possible Cocktails</h2>\n                        <Card.Group className='card-group' centered >\n                            {this.renderMyCocktails()}\n                        </Card.Group>\n                </Container>\n                 : <Loading />}\n            </>\n        );\n    }\n}\n\n\nfunction mdp(dispatch){\n    return{\n        fetchUserIngredients: () => dispatch(getUserIngredients()),\n        fetchCocktails: () => dispatch(getCocktails())\n    }\n}\n\nfunction msp(state){\n    return {\n        currentUser: state.currentUser,\n        userIngApi: state.userIngApi,\n        cocktailsApi: state.cocktailsApi\n    }\n}\n\n\nexport default connect(msp, mdp)(AllCocktails);\n","/Users/andrea/tendr/tendr-react-frontend/src/Components/FilterCocktails.js",["169","170","171","172","173","174"],"import React, { Component } from 'react';\nimport { Dropdown, Grid, Segment, Form, Select } from 'semantic-ui-react'\nimport { connect } from 'react-redux'\nimport { getUserIngredients, getCocktails} from '../Redux/actions'\n\nclass FilterCocktails extends Component {\n\n    componentDidMount() {\n        this.props.fetchCocktails()\n    }\n    \n    setCategories = () => {\n        let allCats = this.props.cocktailsApi.map(cocktail => cocktail.category)\n        let uniqueCats = [...new Set(allCats)]\n        return uniqueCats.map(category => <option value={category}>{category}</option>)\n    }\n\n    render() {\n        return (\n        <div className='search-form'>\n            <form>\n\n            <h1>Search by name</h1>\n            <input name='search' type=\"text\" value={this.props.searchValue} onChange={this.props.changeHandler} placeholder=\"search by name\" />\n               \n\n            <h1>Filter by category</h1>\n            <select name='category' id='category' onChange={this.props.categoryHandler}>\n                <option value=\"All\">All</option>\n                {this.setCategories()}\n            </select>\n            </form>\n        </div>\n        );\n    }\n}\n\nfunction mdp(dispatch){\n    return{\n        fetchCocktails: () => dispatch(getCocktails())\n    }\n}\n\nfunction msp(state){\n    return {\n        cocktailsApi: state.cocktailsApi\n    }\n}\n\nexport default connect(msp, mdp)(FilterCocktails);","/Users/andrea/tendr/tendr-react-frontend/src/index.js",[],["175","176"],"/Users/andrea/tendr/tendr-react-frontend/src/Components/Loading.js",[],"/Users/andrea/tendr/tendr-react-frontend/src/Redux/actionTypes.js",[],"/Users/andrea/tendr/tendr-react-frontend/src/reportWebVitals.js",[],{"ruleId":"177","severity":1,"message":"178","line":2,"column":24,"nodeType":"179","messageId":"180","endLine":2,"endColumn":28},{"ruleId":"177","severity":1,"message":"181","line":2,"column":30,"nodeType":"179","messageId":"180","endLine":2,"endColumn":35},{"ruleId":"182","replacedBy":"183"},{"ruleId":"184","replacedBy":"185"},{"ruleId":"182","replacedBy":"186"},{"ruleId":"184","replacedBy":"187"},{"ruleId":"177","severity":1,"message":"178","line":2,"column":31,"nodeType":"179","messageId":"180","endLine":2,"endColumn":35},{"ruleId":"177","severity":1,"message":"181","line":2,"column":37,"nodeType":"179","messageId":"180","endLine":2,"endColumn":42},{"ruleId":"177","severity":1,"message":"188","line":2,"column":72,"nodeType":"179","messageId":"180","endLine":2,"endColumn":79},{"ruleId":"182","replacedBy":"189"},{"ruleId":"184","replacedBy":"190"},{"ruleId":"177","severity":1,"message":"191","line":2,"column":8,"nodeType":"179","messageId":"180","endLine":2,"endColumn":14},{"ruleId":"177","severity":1,"message":"192","line":13,"column":10,"nodeType":"179","messageId":"180","endLine":13,"endColumn":19},{"ruleId":"177","severity":1,"message":"193","line":2,"column":10,"nodeType":"179","messageId":"180","endLine":2,"endColumn":16},{"ruleId":"177","severity":1,"message":"194","line":2,"column":30,"nodeType":"179","messageId":"180","endLine":2,"endColumn":34},{"ruleId":"182","replacedBy":"195"},{"ruleId":"184","replacedBy":"196"},{"ruleId":"177","severity":1,"message":"197","line":2,"column":16,"nodeType":"179","messageId":"180","endLine":2,"endColumn":21},{"ruleId":"177","severity":1,"message":"198","line":2,"column":24,"nodeType":"179","messageId":"180","endLine":2,"endColumn":29},{"ruleId":"177","severity":1,"message":"181","line":2,"column":31,"nodeType":"179","messageId":"180","endLine":2,"endColumn":36},{"ruleId":"177","severity":1,"message":"199","line":2,"column":50,"nodeType":"179","messageId":"180","endLine":2,"endColumn":55},{"ruleId":"182","replacedBy":"200"},{"ruleId":"184","replacedBy":"201"},{"ruleId":"177","severity":1,"message":"191","line":10,"column":8,"nodeType":"179","messageId":"180","endLine":10,"endColumn":14},{"ruleId":"177","severity":1,"message":"192","line":13,"column":10,"nodeType":"179","messageId":"180","endLine":13,"endColumn":19},{"ruleId":"177","severity":1,"message":"202","line":2,"column":10,"nodeType":"179","messageId":"180","endLine":2,"endColumn":20},{"ruleId":"177","severity":1,"message":"192","line":2,"column":18,"nodeType":"179","messageId":"180","endLine":2,"endColumn":27},{"ruleId":"203","severity":1,"message":"204","line":26,"column":31,"nodeType":"205","messageId":"206","endLine":26,"endColumn":33},{"ruleId":"177","severity":1,"message":"178","line":5,"column":19,"nodeType":"179","messageId":"180","endLine":5,"endColumn":23},{"ruleId":"177","severity":1,"message":"207","line":2,"column":10,"nodeType":"179","messageId":"180","endLine":2,"endColumn":14},{"ruleId":"177","severity":1,"message":"208","line":2,"column":16,"nodeType":"179","messageId":"180","endLine":2,"endColumn":22},{"ruleId":"177","severity":1,"message":"209","line":2,"column":24,"nodeType":"179","messageId":"180","endLine":2,"endColumn":31},{"ruleId":"177","severity":1,"message":"210","line":6,"column":10,"nodeType":"179","messageId":"180","endLine":6,"endColumn":18},{"ruleId":"177","severity":1,"message":"198","line":2,"column":19,"nodeType":"179","messageId":"180","endLine":2,"endColumn":24},{"ruleId":"177","severity":1,"message":"211","line":2,"column":52,"nodeType":"179","messageId":"180","endLine":2,"endColumn":60},{"ruleId":"177","severity":1,"message":"212","line":30,"column":13,"nodeType":"179","messageId":"180","endLine":30,"endColumn":19},{"ruleId":"203","severity":1,"message":"204","line":72,"column":34,"nodeType":"205","messageId":"206","endLine":72,"endColumn":36},{"ruleId":"177","severity":1,"message":"211","line":2,"column":10,"nodeType":"179","messageId":"180","endLine":2,"endColumn":18},{"ruleId":"177","severity":1,"message":"213","line":2,"column":20,"nodeType":"179","messageId":"180","endLine":2,"endColumn":24},{"ruleId":"177","severity":1,"message":"209","line":2,"column":26,"nodeType":"179","messageId":"180","endLine":2,"endColumn":33},{"ruleId":"177","severity":1,"message":"207","line":2,"column":35,"nodeType":"179","messageId":"180","endLine":2,"endColumn":39},{"ruleId":"177","severity":1,"message":"214","line":2,"column":41,"nodeType":"179","messageId":"180","endLine":2,"endColumn":47},{"ruleId":"177","severity":1,"message":"215","line":4,"column":10,"nodeType":"179","messageId":"180","endLine":4,"endColumn":28},{"ruleId":"182","replacedBy":"216"},{"ruleId":"184","replacedBy":"217"},"no-unused-vars","'Item' is defined but never used.","Identifier","unusedVar","'Label' is defined but never used.","no-native-reassign",["218"],"no-negated-in-lhs",["219"],["218"],["219"],"'Divider' is defined but never used.",["218"],["219"],"'Header' is defined but never used.","'Container' is defined but never used.","'Sticky' is defined but never used.","'Icon' is defined but never used.",["218"],["219"],"'Input' is defined but never used.","'Image' is defined but never used.","'Modal' is defined but never used.",["218"],["219"],"'withRouter' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'Form' is defined but never used.","'Button' is defined but never used.","'Segment' is defined but never used.","'Redirect' is defined but never used.","'Dropdown' is defined but never used.","'catObj' is assigned a value but never used.","'Grid' is defined but never used.","'Select' is defined but never used.","'getUserIngredients' is defined but never used.",["218"],["219"],"no-global-assign","no-unsafe-negation"]