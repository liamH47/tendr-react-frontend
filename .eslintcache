[{"/Users/andrea/tendr/tendr-react-frontend/src/Components/SavedCocktailItem.js":"1","/Users/andrea/tendr/tendr-react-frontend/src/Components/UserCocktail.js":"2","/Users/andrea/tendr/tendr-react-frontend/src/Components/CocktailItem.js":"3","/Users/andrea/tendr/tendr-react-frontend/src/Containers/MainContainer.js":"4","/Users/andrea/tendr/tendr-react-frontend/src/Components/Header.js":"5","/Users/andrea/tendr/tendr-react-frontend/src/Components/SignUpForm.js":"6","/Users/andrea/tendr/tendr-react-frontend/src/Components/CocktailSearch.js":"7","/Users/andrea/tendr/tendr-react-frontend/src/Components/UserIngredient.js":"8","/Users/andrea/tendr/tendr-react-frontend/src/Components/IngredientSearch.js":"9","/Users/andrea/tendr/tendr-react-frontend/src/Components/Ingredient.js":"10","/Users/andrea/tendr/tendr-react-frontend/src/Components/Cocktail.js":"11","/Users/andrea/tendr/tendr-react-frontend/src/Components/LogInForm.js":"12","/Users/andrea/tendr/tendr-react-frontend/src/Components/ShoppingListItem.js":"13","/Users/andrea/tendr/tendr-react-frontend/src/Redux/rootReducer.js":"14","/Users/andrea/tendr/tendr-react-frontend/src/App.js":"15","/Users/andrea/tendr/tendr-react-frontend/src/Containers/MyIngrContainer.js":"16","/Users/andrea/tendr/tendr-react-frontend/src/Containers/MyCocktailsCont.js":"17","/Users/andrea/tendr/tendr-react-frontend/src/Containers/SavedCocktailsCont.js":"18","/Users/andrea/tendr/tendr-react-frontend/src/Containers/AllCocktails.js":"19","/Users/andrea/tendr/tendr-react-frontend/src/Components/CocktailModal.js":"20","/Users/andrea/tendr/tendr-react-frontend/src/Containers/AllIngContainer.js":"21","/Users/andrea/tendr/tendr-react-frontend/src/Containers/ShoppingListCont.js":"22"},{"size":6587,"mtime":1609883401000,"results":"23","hashOfConfig":"24"},{"size":910,"mtime":1609103158000,"results":"25","hashOfConfig":"24"},{"size":4453,"mtime":1609879009000,"results":"26","hashOfConfig":"24"},{"size":2613,"mtime":1609885466000,"results":"27","hashOfConfig":"24"},{"size":1025,"mtime":1609724461000,"results":"28","hashOfConfig":"24"},{"size":1772,"mtime":1609864824000,"results":"29","hashOfConfig":"24"},{"size":374,"mtime":1609784410000,"results":"30","hashOfConfig":"24"},{"size":2749,"mtime":1609103158000,"results":"31","hashOfConfig":"24"},{"size":378,"mtime":1609864823000,"results":"32","hashOfConfig":"24"},{"size":2627,"mtime":1609883103000,"results":"33","hashOfConfig":"24"},{"size":2571,"mtime":1609873702000,"results":"34","hashOfConfig":"24"},{"size":1749,"mtime":1609885650000,"results":"35","hashOfConfig":"24"},{"size":1078,"mtime":1609724461000,"results":"36","hashOfConfig":"24"},{"size":3995,"mtime":1609794023000,"results":"37","hashOfConfig":"24"},{"size":1970,"mtime":1609864823000,"results":"38","hashOfConfig":"24"},{"size":2299,"mtime":1609892816000,"results":"39","hashOfConfig":"24"},{"size":1953,"mtime":1609892966000,"results":"40","hashOfConfig":"24"},{"size":1480,"mtime":1609892628000,"results":"41","hashOfConfig":"24"},{"size":3247,"mtime":1609893310000,"results":"42","hashOfConfig":"24"},{"size":1660,"mtime":1609876832000,"results":"43","hashOfConfig":"24"},{"size":3531,"mtime":1609885874000,"results":"44","hashOfConfig":"24"},{"size":1354,"mtime":1609893050000,"results":"45","hashOfConfig":"24"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48"},"1wjrw23",{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"62","messages":"63","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"67","messages":"68","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"70"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"83","messages":"84","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"85","messages":"86","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"89","messages":"90","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/andrea/tendr/tendr-react-frontend/src/Components/SavedCocktailItem.js",["100"],"import React, { Component } from 'react';\nimport { Button, Icon, Item, Label, List, Form} from 'semantic-ui-react'\nimport { connect } from 'react-redux'\nimport { getCocktails, getUserIngredients, addToShoppingList, getIngredients, addNote, getSavedCocktails, deleteSavedCocktail, getShoppingList } from '../Redux/actions'\n\nclass SavedCocktailItem extends Component {\n\n    state = {\n        notes: \"\"\n    }\n\n    changeHandler = (e) => {\n        this.setState({ [e.target.name]: e.target.value })\n    }\n\n    componentDidMount() {\n        this.props.fetchSavedCocktails()\n        this.props.fetchIngredients()\n        this.props.fetchUserIngs()\n        this.props.fetchShoppingList()\n        console.log(\"saved cocktail render props:\", this.props)\n    }\n\n    localSaveHandler = (e) => {\n        e.preventDefault()\n        this.props.localSaveHandler( this.props.savedCocktail.cocktail_id, this.props.currentUser.user.id)\n        console.log(\"hello?\")\n    }\n\n    localDeleteHandler = () => {\n        this.props.localDeleteHandler(this.props.id)\n    }\n\n    localNoteHandler = (e) => {\n        e.preventDefault()\n        let currentNotes = this.props.savedCocktail.notes\n        let newNotes = [...currentNotes, this.state.notes]\n        const updateObj = {\n            id: this.props.id,\n            user_id: this.props.savedCocktail.user_id,\n            cocktail_id: this.props.savedCocktail.cocktail_id,\n            notes: newNotes,\n            user: this.props.savedCocktail.user,\n            cocktail: this.props.savedCocktail.cocktail\n        }\n        this.props.addNewNote(updateObj)\n        e.target.reset()\n    }\n    \n    ingredientCheck = (name) => {\n        let ingNames = this.props.userIngApi.map(ingredient => ingredient.name)\n        let shoppingNames = this.props.shoppingListApi.map(ing => ing.ingredient.name)\n        if(ingNames.includes(name)) {\n            return <Icon color='green' size='big' name='check circle' />\n        }else if(shoppingNames.includes(name)){\n            return <Icon color='blue' size='big' name='shopping cart'/>\n        }else{\n            return <Icon color='red' size='big' name='exclamation circle' />\n        }\n    }\n\n    howManyIngs = (cocktailObj) => {\n        let cocktail = cocktailObj.cocktail_ingredients\n        let ingNames = this.props.userIngApi.map(ingredient => ingredient.name)\n        let hasThis = cocktail.filter((ing) => ingNames.includes(ing.name))\n        let missingIngCount = cocktail.length - hasThis.length\n        if(missingIngCount >= 1){\n            return `You are missing ${missingIngCount} ingredients `\n        } else {\n            return 'You have all the Ingredients!'\n        }\n    }\n\n    renderIngTable = () => {\n        let cocktIngs = this.props.cocktail.cocktail_ingredients\n        return cocktIngs.map((ingredient, index) => {\n            const { name, unit, quantity } = ingredient\n            return(\n                <List.Item floated='left'>\n                    <List.Content floated='left'>\n                        {this.ingredientCheck(name)} {quantity} {unit} {name} \n                    </List.Content>\n                </List.Item>\n            )\n        })\n    }\n\n    render() {\n        // const { savedCocktail } = this.props.savedCocktail\n        return (\n            <Item padded='very'>\n                <Item.Image rounded size='large' floated='left' src={this.props.savedCocktail.cocktail.image_url} />\n                <Item.Content floated='left'>\n                    <Item.Header className='cocktail-item-header' floated='left'><h1>{this.props.savedCocktail.cocktail.name}</h1></Item.Header>\n                    <Item.Meta>{this.props.savedCocktail.cocktail.category}</Item.Meta>\n                    <Item.Description>{this.howManyIngs(this.props.savedCocktail.cocktail)}</Item.Description>\n                    <List animated verticalAlign='middle'>\n                        {/* <List.Header floated='left'>Ingredients</List.Header> */}\n                        {this.renderIngTable()}\n                    </List>\n                    <Item.Description>Glass: {this.props.savedCocktail.cocktail.recommended_glass} </Item.Description>\n                    <Item.Description>Ice: {this.props.savedCocktail.cocktail.recommended_ice} </Item.Description>\n                    <List ordered floated='left'>\n                        <List.Header floated='left'>Instructions</List.Header>\n                        {this.props.savedCocktail.cocktail.instructions.map(element => <List.Item floated='left'><List.Content floated='left'>{element}</List.Content></List.Item>)}\n                    </List>\n                </Item.Content>\n                <Item.Content floated='right'>\n                    <List verticalAlign='middle' bulleted floated='right'>\n                        <List.Header>My Notes</List.Header>\n                        {this.props.savedCocktail.notes.map(element => <List.Item floated='left'><List.Content floated='left'>{element}</List.Content></List.Item>)}\n                    </List>\n                    <Form onSubmit={this.localNoteHandler}>\n                        <Form.Field>\n                            <label>Notes</label>\n                            <input type='text' name='notes' value={this.state.notes} onChange={this.changeHandler} placeholder='your notes' />\n                        </Form.Field>\n                        <Button type='submit'>Add Note</Button>\n                    </Form>\n                        \n                    <Button verticalAlign='bottom' onClick={this.localDeleteHandler}>Remove From Saved Cocktails</Button>\n                </Item.Content>\n            </Item>\n        );\n    }\n}\nfunction mdp(dispatch){\n    return{\n        fetchIngredients: () => dispatch(getIngredients()),\n        fetchCocktails: () => dispatch(getCocktails()),\n        fetchUserIngs: () => dispatch(getUserIngredients()),\n        localListHandler: (ingredient) => dispatch(addToShoppingList(ingredient)),\n        fetchSavedCocktails: () => dispatch(getSavedCocktails()),\n        addNewNote: (updateObj) => dispatch(addNote(updateObj)),\n        localDeleteHandler: (id) => dispatch(deleteSavedCocktail(id)),\n        localSaveHandler: (ingredient) => dispatch(addToShoppingList(ingredient)),\n        fetchShoppingList: () => dispatch(getShoppingList()) \n    }\n}\n\nfunction msp(state){\n    return {\n        currentUser: state.currentUser,\n        userIngApi: state.userIngApi,\n        cocktailsApi: state.cocktailsApi,\n        savedCocktails: state.savedCocktails,\n        shoppingListApi: state.shoppingListApi\n    }\n}\n\nexport default connect(msp, mdp)(SavedCocktailItem);","/Users/andrea/tendr/tendr-react-frontend/src/Components/UserCocktail.js",[],["101","102"],"/Users/andrea/tendr/tendr-react-frontend/src/Components/CocktailItem.js",["103","104","105"],"import React, { Component } from 'react';\nimport { Button, Icon, Image, Item, Label, List} from 'semantic-ui-react'\nimport { connect } from 'react-redux'\nimport { getCocktails, getUserIngredients, addToShoppingList, getIngredients, saveCocktail, getShoppingList } from '../Redux/actions'\nimport CocktailModal from './CocktailModal'\nclass CocktailItem extends Component {\n\n    componentDidMount() {\n        this.props.fetchIngredients()\n        this.props.fetchUserIngs()\n        this.props.fetchShoppingList()\n        console.log(this.props.currentUser)\n        // debugger\n    }\n\n\n    localSaveHandler = (e) => {\n        e.preventDefault()\n        this.props.localSaveHandler( this.props.cocktail.id, this.props.currentUser.user.id)\n    }\n\n    // localListHandler = (e) => {\n    //     e.preventDefault()\n    //     this.props.localListHandler({\n    //         ingredient_id: this.props.ingredient.id,\n    //         user_id: this.props.currentUser.user.id\n    //     })\n\n    // }\n    //need to find the id of the ingredient whose name matches \n\n    clickHandler = () => {\n        console.log(\"click\")\n    }\n    \n    ingredientCheck = (name) => {\n        let ingNames = this.props.userIngApi.map(ingredient => ingredient.name)\n        let shoppingNames = this.props.shoppingListApi.map(ing => ing.ingredient.name)\n        if(ingNames.includes(name)) {\n            return <Icon color='green' size='big' name='check circle' />\n        }else if(shoppingNames.includes(name)){\n            return <Icon color='blue' size='big' name='shopping cart'/>\n        }else{\n            return <Icon color='red' size='big' name='exclamation circle' />\n            // <Label>\n            //             <Button onClick={this.clickHandler} size='small'>Add To Shopping List</Button>\n            //        </Label>\n        }\n    }\n\n    howManyIngs = (cocktailObj) => {\n        let cocktail = cocktailObj.cocktail_ingredients\n        let ingNames = this.props.userIngApi.map(ingredient => ingredient.name)\n        let hasThis = cocktail.filter((ing) => ingNames.includes(ing.name))\n        let missingIngCount = cocktail.length - hasThis.length\n        if(missingIngCount >= 1){\n            return `You are missing ${missingIngCount} ingredients `\n        } else {\n            return 'You have all the Ingredients!'\n        }\n    }\n\n    renderIngTable = () => {\n        let cocktIngs = this.props.cocktail.cocktail_ingredients\n        return cocktIngs.map((ingredient, index) => {\n            const { name, unit, quantity } = ingredient\n            return(\n                <List.Item floated='left'>\n                    <List.Content floated='left'>\n                        {this.ingredientCheck(name)} {quantity} {unit} {name} \n                    </List.Content>\n                </List.Item>\n            )\n        })\n    }\n\n    render() {\n        const { cocktail } = this.props\n        return (\n            <Item padded='very'>\n                <Item.Image rounded size='medium' floated='left' src={cocktail.image_url} />\n                <Item.Content>\n                    <Item.Header>{cocktail.name}</Item.Header>\n                    <Item.Meta>{cocktail.category}</Item.Meta>\n                    <Item.Description>{this.howManyIngs(this.props.cocktail)}</Item.Description>\n                    <List ordered verticalAlign='bottom'>\n                        {cocktail.instructions.map(element => <List.Item>{element}</List.Item>)}\n                    </List>\n                    <List verticalAlign='left'>\n                        {this.renderIngTable()}\n\n                    </List>\n                    <Button onClick={this.localSaveHandler}>Add to Saved Cocktails</Button>\n                </Item.Content>\n            </Item>\n\n        );\n    }\n}\nfunction mdp(dispatch){\n    return{\n        fetchIngredients: () => dispatch(getIngredients()),\n        fetchCocktails: () => dispatch(getCocktails()),\n        fetchUserIngs: () => dispatch(getUserIngredients()),\n        localListHandler: (ingredient) => dispatch(addToShoppingList(ingredient)),\n        localSaveHandler: (cocktailId, userId) => dispatch(saveCocktail(cocktailId, userId)),\n        fetchShoppingList: () => dispatch(getShoppingList()) \n    }\n}\n\nfunction msp(state){\n    return {\n        currentUser: state.currentUser,\n        userIngApi: state.userIngApi,\n        cocktailsApi: state.cocktailsApi,\n        shoppingListApi: state.shoppingListApi\n    }\n}\n\nexport default connect(msp, mdp)(CocktailItem);\n\n\n","/Users/andrea/tendr/tendr-react-frontend/src/Containers/MainContainer.js",[],"/Users/andrea/tendr/tendr-react-frontend/src/Components/Header.js",[],["106","107"],"/Users/andrea/tendr/tendr-react-frontend/src/Components/SignUpForm.js",[],"/Users/andrea/tendr/tendr-react-frontend/src/Components/CocktailSearch.js",["108"],"import React from 'react';\nimport { Form, Input } from 'semantic-ui-react'\n\nconst CocktailSearch = ({ searchValue, changeHandler }) => {\n    return(\n        <div>\n            <Form>\n                <Form.Input type=\"text\" value={searchValue} onChange={changeHandler} placeholder=\"search by name\" />\n            </Form>\n        </div>\n    ) \n\n}\n\nexport default CocktailSearch","/Users/andrea/tendr/tendr-react-frontend/src/Components/UserIngredient.js",["109"],"/Users/andrea/tendr/tendr-react-frontend/src/Components/IngredientSearch.js",["110"],"import React from 'react';\nimport { Form, Input } from 'semantic-ui-react'\n\nconst IngredientSearch = ({ searchValue, changeHandler }) => {\n    return(\n        <div>\n            <Form>\n                <Form.Input type=\"text\" value={searchValue} onChange={changeHandler} placeholder=\"search by name\" />\n            </Form>\n        </div>\n    ) \n\n}\n\nexport default IngredientSearch",["111","112"],"/Users/andrea/tendr/tendr-react-frontend/src/Components/Ingredient.js",[],"/Users/andrea/tendr/tendr-react-frontend/src/Components/Cocktail.js",[],"/Users/andrea/tendr/tendr-react-frontend/src/Components/LogInForm.js",[],"/Users/andrea/tendr/tendr-react-frontend/src/Components/ShoppingListItem.js",[],"/Users/andrea/tendr/tendr-react-frontend/src/Redux/rootReducer.js",[],"/Users/andrea/tendr/tendr-react-frontend/src/App.js",[],"/Users/andrea/tendr/tendr-react-frontend/src/Containers/MyIngrContainer.js",["113"],"/Users/andrea/tendr/tendr-react-frontend/src/Containers/MyCocktailsCont.js",["114","115"],"/Users/andrea/tendr/tendr-react-frontend/src/Containers/SavedCocktailsCont.js",[],"/Users/andrea/tendr/tendr-react-frontend/src/Containers/AllCocktails.js",["116","117","118","119"],"import React, { Component } from 'react';\nimport { Segment, Image, Card, Item } from 'semantic-ui-react'\nimport { connect } from 'react-redux'\nimport { getUserIngredients, getCocktails} from '../Redux/actions'\nimport Cocktail from '../Components/Cocktail'\nimport CocktailItem from '../Components/CocktailItem'\nimport CocktailSearch from '../Components/CocktailSearch'\n\nclass AllCocktails extends Component {\n\n    state =  {\n        searchValue: \"\",\n        // categories: []\n    }\n\n    changeHandler = (e) => {\n        this.setState({ searchValue: e.target.value })\n    }\n\n    componentDidMount() {\n        this.props.fetchCocktails()\n        // console.log(this.props.currentUser)\n        // debugger\n    }\n\n    renderAllCocktails = () => {\n        let filtered = this.props.cocktailsApi.filter(el => this.checkCanMake(el, this.props.userIngApi) === false)\n        let sorted = filtered.sort((a, b) => this.howManyIngs(a) - this.howManyIngs(b))\n        let searchArray = sorted.filter(cocktail => cocktail.name.toLowerCase().includes(this.state.searchValue.toLowerCase()))\n        return searchArray.map(tailObj => <CocktailItem name={tailObj.name} image_url={tailObj.image_url} cocktail={tailObj} id={tailObj.id} key={tailObj.id} />)\n     }\n\n    //  let searchArray2 = sorted2.filter(ingredient => ingredient.name.toLowerCase().includes(this.state.searchValue.toLocaleLowerCase()));\n\n     howManyIngs = (cocktailObj) => {\n        let cocktail = cocktailObj.cocktail_ingredients\n        let ingNames = this.props.userIngApi.map(ingredient => ingredient.name)\n        let hasThis = cocktail.filter((ing) => ingNames.includes(ing.name))\n        return cocktail.length - hasThis.length\n    }\n    \n\n\n     checkCanMake(singleCockt, userIngApi) {\n         let cocktail = singleCockt.cocktail_ingredients\n         return cocktail.every(function(ing) {\n          return userIngApi.some(function(ing2) {\n             return (ing.name == ing2.name) && (ing.quantity <= ing2.quantity) \n           })\n         })\n     }\n\n    // renderAllCocktails = () => {\n    //     return this.props.cocktailsApi.map(cocktail => <Cocktail cocktail={cocktail} id={cocktail.id} key={cocktail.id} />)\n    // }\n    \n    render() {\n        return (\n            <> {this.props.cocktailsApi.length ? \n                <Segment basic padded='very' vertical>\n                    <h2>All Cocktails</h2>\n                    <CocktailSearch changeHandler={this.changeHandler} searchValue={this.state.searchValue} />\n                    <Item.Group relaxed divided>\n                        {this.renderAllCocktails()}\n                    </Item.Group>\n                    {/* <Card.Group centered >\n                        {this.renderAllCocktails()}\n                    </Card.Group> */}\n                </Segment>\n                 : <h2>loading</h2>\n                 }\n            </>\n        );\n    }\n}\n\n\nfunction mdp(dispatch){\n    return{\n        fetchUserIngredients: () => dispatch(getUserIngredients()),\n        fetchCocktails: () => dispatch(getCocktails())\n    }\n}\n\nfunction msp(state){\n    return {\n        currentUser: state.currentUser,\n        userIngApi: state.userIngApi,\n        cocktailsApi: state.cocktailsApi\n    }\n}\n\n\nexport default connect(msp, mdp)(AllCocktails);","/Users/andrea/tendr/tendr-react-frontend/src/Components/CocktailModal.js",["120","121","122","123"],"import React, { useState } from 'react'\nimport { Button, Header, Image, Modal, List, Card, Icon } from 'semantic-ui-react'\n\n\nconst CocktailModal = (props) => {\n\n\n  \n\n  const [open, setOpen] = React.useState(false)\n//   <Image.Header>{props.name}</Image.Header>\n//   {<Button>{props.name}</Button>}\n    // <Card>\n    //     <Image src={props.cocktail.image_url} wrapped ui={false} size='small'/>\n    //     <Card.Content>\n\n    //     <Card.Header>{props.name}</Card.Header>\n    //     </Card.Content>\n    // </Card>\n  return (\n      <Modal\n      onClose={() => setOpen(false)}\n      onOpen={() => setOpen(true)}\n      open={open}\n      trigger={<Button>Show Modal</Button>}\n      >\n      <Modal.Header textAlign='center'>\n        <h1>{props.name}</h1>\n        <p>{props.category}</p>\n      </Modal.Header>\n      <Modal.Content image>\n        <Image size='medium' src={props.image_url} alt={props.name} wrapped />\n        <Modal.Description>\n          <Header textAlign='center' content={props.name} />\n          {/* <List ordered verticalAlign='bottom'>\n                        {props.cocktail.instructions.map(element => <List.Item>{element}</List.Item>)}\n          </List> */}\n        </Modal.Description>\n      </Modal.Content>\n      <Modal.Actions>\n        <Button color='black' onClick={() => setOpen(false)}>\n          Nope\n        </Button>\n        <Button\n          content=\"Yep, that's me\"\n          labelPosition='right'\n          icon='checkmark'\n          onClick={() => setOpen(false)}\n          positive\n          />\n      </Modal.Actions>\n    </Modal>\n        \n\n//   console.log(\"modal return func\", this.props)\n)\n\n}\n\nexport default CocktailModal","/Users/andrea/tendr/tendr-react-frontend/src/Containers/AllIngContainer.js",["124"],"import React, { Component } from 'react';\nimport { Segment, Card, Container } from 'semantic-ui-react'\nimport Ingredient from '../Components/Ingredient'\nimport { connect } from 'react-redux'\nimport {getIngredients, getUserIngredients, getCocktails} from '../Redux/actions'\nimport { Redirect } from 'react-router-dom'\nimport IngredientSearch from '../Components/IngredientSearch'\n\nclass AllIngContainer extends Component {\n\n    state =  {\n        searchValue: \"\",\n        // categories: []\n    }\n\n    changeHandler = (e) => {\n        this.setState({ searchValue: e.target.value })\n    }\n \n    componentDidMount() {\n            this.props.fetchIngredients()\n            this.props.fetchUserIngredients()\n            this.props.fetchCocktails()\n            // debugger\n    }\n\n    // setCategories = () => {\n    //     let \n    // }\n\n    renderIngredients = () => {\n        if(this.props.userIngApi.length > 0) {\n            let ids = this.props.userIngApi.map(obj => obj.ingredient_id)\n            let ingredients = this.props.ingredientsApi\n            let filtered = ingredients.filter((obj) => !ids.includes(obj.id))\n            let sorted = filtered.sort((a, b) => this.cocktailCount(b) -this.cocktailCount(a))\n            let searchArray = sorted.filter(ingredient => ingredient.name.toLowerCase().includes(this.state.searchValue.toLocaleLowerCase()));\n            return searchArray.map(ingObj => <Ingredient currentUser={this.props.currentUser} cocktailCount={this.cocktailCount(ingObj)} ingredient={ingObj} key={ingObj.id} id={ingObj.id} />)\n        } else {\n            let sorted2 = this.props.ingredientsApi.sort((a, b) => this.cocktailCount(b) -this.cocktailCount(a))\n            let searchArray2 = sorted2.filter(ingredient => ingredient.name.toLowerCase().includes(this.state.searchValue.toLocaleLowerCase()));\n            return searchArray2.map(ingObj => <Ingredient currentUser={this.props.currentUser} cocktailCount={this.cocktailCount(ingObj)} ingredient={ingObj} key={ingObj.id} id={ingObj.id} />)\n        }\n    }\n\n    cocktailCount = (ingredient) => {\n        let cocktailMap = this.props.cocktailsApi.map(cocktail => cocktail.cocktail_ingredients)\n        let cocktIngs = cocktailMap.map(obj => obj.map(newObj => newObj.name))\n        let totalCocktails = cocktIngs.filter(obj => obj.includes(ingredient.name))\n        return totalCocktails.length\n      }\n\n\n\n    render() {\n        return (\n            <> {this.props.ingredientsApi.length ? \n            <Container>\n                <Segment content='Search' basic padded='very' vertical>\n                    <IngredientSearch changeHandler={this.changeHandler} searchValue={this.state.searchValue} />\n                </Segment>\n                <Segment basic padded='very' vertical>\n                    <Card.Group centered>\n                        {this.renderIngredients()}\n                    </Card.Group>\n                </Segment>\n            </Container> : <h2>loading</h2>}\n            </>\n        );\n    }\n}\n\n    function mdp(dispatch){\n        return {\n            fetchIngredients: () => dispatch(getIngredients()),\n            fetchUserIngredients: () =>dispatch(getUserIngredients()),\n            fetchCocktails: () =>dispatch(getCocktails())\n        }\n    }\n    function msp(state){\n        return {\n            currentUser: state.currentUser,\n            ingredientsApi: state.ingredientsApi,\n            userIngApi: state.userIngApi,\n            cocktailsApi: state.cocktailsApi\n        }\n    }\n\nexport default connect(msp, mdp)(AllIngContainer)","/Users/andrea/tendr/tendr-react-frontend/src/Containers/ShoppingListCont.js",[],{"ruleId":"125","severity":1,"message":"126","line":2,"column":30,"nodeType":"127","messageId":"128","endLine":2,"endColumn":35},{"ruleId":"129","replacedBy":"130"},{"ruleId":"131","replacedBy":"132"},{"ruleId":"125","severity":1,"message":"133","line":2,"column":24,"nodeType":"127","messageId":"128","endLine":2,"endColumn":29},{"ruleId":"125","severity":1,"message":"126","line":2,"column":37,"nodeType":"127","messageId":"128","endLine":2,"endColumn":42},{"ruleId":"125","severity":1,"message":"134","line":5,"column":8,"nodeType":"127","messageId":"128","endLine":5,"endColumn":21},{"ruleId":"129","replacedBy":"135"},{"ruleId":"131","replacedBy":"136"},{"ruleId":"125","severity":1,"message":"137","line":2,"column":16,"nodeType":"127","messageId":"128","endLine":2,"endColumn":21},{"ruleId":"125","severity":1,"message":"138","line":2,"column":30,"nodeType":"127","messageId":"128","endLine":2,"endColumn":34},{"ruleId":"125","severity":1,"message":"137","line":2,"column":16,"nodeType":"127","messageId":"128","endLine":2,"endColumn":21},{"ruleId":"129","replacedBy":"139"},{"ruleId":"131","replacedBy":"140"},{"ruleId":"125","severity":1,"message":"141","line":2,"column":10,"nodeType":"127","messageId":"128","endLine":2,"endColumn":20},{"ruleId":"125","severity":1,"message":"142","line":2,"column":18,"nodeType":"127","messageId":"128","endLine":2,"endColumn":27},{"ruleId":"143","severity":1,"message":"144","line":26,"column":31,"nodeType":"145","messageId":"146","endLine":26,"endColumn":33},{"ruleId":"125","severity":1,"message":"133","line":2,"column":19,"nodeType":"127","messageId":"128","endLine":2,"endColumn":24},{"ruleId":"125","severity":1,"message":"147","line":2,"column":26,"nodeType":"127","messageId":"128","endLine":2,"endColumn":30},{"ruleId":"125","severity":1,"message":"148","line":5,"column":8,"nodeType":"127","messageId":"128","endLine":5,"endColumn":16},{"ruleId":"143","severity":1,"message":"144","line":48,"column":31,"nodeType":"145","messageId":"146","endLine":48,"endColumn":33},{"ruleId":"125","severity":1,"message":"149","line":1,"column":17,"nodeType":"127","messageId":"128","endLine":1,"endColumn":25},{"ruleId":"125","severity":1,"message":"150","line":2,"column":40,"nodeType":"127","messageId":"128","endLine":2,"endColumn":44},{"ruleId":"125","severity":1,"message":"147","line":2,"column":46,"nodeType":"127","messageId":"128","endLine":2,"endColumn":50},{"ruleId":"125","severity":1,"message":"138","line":2,"column":52,"nodeType":"127","messageId":"128","endLine":2,"endColumn":56},{"ruleId":"125","severity":1,"message":"151","line":6,"column":10,"nodeType":"127","messageId":"128","endLine":6,"endColumn":18},"no-unused-vars","'Label' is defined but never used.","Identifier","unusedVar","no-native-reassign",["152"],"no-negated-in-lhs",["153"],"'Image' is defined but never used.","'CocktailModal' is defined but never used.",["152"],["153"],"'Input' is defined but never used.","'Icon' is defined but never used.",["152"],["153"],"'withRouter' is defined but never used.","'Container' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'Card' is defined but never used.","'Cocktail' is defined but never used.","'useState' is defined but never used.","'List' is defined but never used.","'Redirect' is defined but never used.","no-global-assign","no-unsafe-negation"]