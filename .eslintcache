[{"/Users/andrea/tendr/tendr-react-frontend/src/index.js":"1","/Users/andrea/tendr/tendr-react-frontend/src/Redux/rootReducer.js":"2","/Users/andrea/tendr/tendr-react-frontend/src/Containers/AllCocktails.js":"3","/Users/andrea/tendr/tendr-react-frontend/src/Containers/ShoppingListCont.js":"4","/Users/andrea/tendr/tendr-react-frontend/src/Components/SavedCocktailItem.js":"5","/Users/andrea/tendr/tendr-react-frontend/src/Components/SignUpForm.js":"6","/Users/andrea/tendr/tendr-react-frontend/src/Components/Ingredient.js":"7","/Users/andrea/tendr/tendr-react-frontend/src/Components/CocktailSearch.js":"8","/Users/andrea/tendr/tendr-react-frontend/src/Components/FilterCocktails.js":"9"},{"size":864,"mtime":1608511277000,"results":"10","hashOfConfig":"11"},{"size":3995,"mtime":1609864824000,"results":"12","hashOfConfig":"11"},{"size":5672,"mtime":1610310899000,"results":"13","hashOfConfig":"11"},{"size":1393,"mtime":1609960834000,"results":"14","hashOfConfig":"11"},{"size":12418,"mtime":1610048500000,"results":"15","hashOfConfig":"11"},{"size":1772,"mtime":1609864824000,"results":"16","hashOfConfig":"11"},{"size":2862,"mtime":1610042702000,"results":"17","hashOfConfig":"11"},{"size":1125,"mtime":1610309997000,"results":"18","hashOfConfig":"11"},{"size":2203,"mtime":1610309530000,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1wjrw23",{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"24","messages":"25","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/andrea/tendr/tendr-react-frontend/src/index.js",[],"/Users/andrea/tendr/tendr-react-frontend/src/Redux/rootReducer.js",[],"/Users/andrea/tendr/tendr-react-frontend/src/Containers/AllCocktails.js",["40","41","42","43","44"],"import React, { Component } from 'react';\nimport { Segment, Image, Card, Container, Divider, Dropdown} from 'semantic-ui-react'\nimport { connect } from 'react-redux'\nimport { getUserIngredients, getCocktails} from '../Redux/actions'\nimport FilterCocktails from '../Components/FilterCocktails'\n// import CocktailFilter from '../Components/FilterCocktails'\nimport CocktailItem from '../Components/CocktailItem'\nimport CocktailSearch from '../Components/CocktailSearch'\nimport Loading from '../Components/Loading'\n\nclass AllCocktails extends Component {\n\n    state =  {\n        searchValue: \"\",\n        currentCat: null,\n        categoryOptions: []\n    }\n\n    changeHandler = (e) => {\n        this.setState({ searchValue: e.target.value })\n    }\n\n    categoryHandler = (e) => {\n        this.setState({currentCat: e.target.value})\n    }\n\n    componentDidMount() {\n        this.props.fetchCocktails()\n        this.categoriesArr()\n        // console.log(this.props.currentUser)\n        // debugger\n    }\n\n    categoriesArr = () => {\n        let allCats = this.props.cocktailsApi.map(cocktail => cocktail.category)\n        let uniqueCats = [...new Set(allCats)]\n        // this.setState({ categoryOptions: uniqueCats})\n\n        let selectionsObj = uniqueCats.map(category => ({ key: category, text: category, value: category }))\n        this.setState({ categoryOptions: selectionsObj})\n    }\n\n    filterByCategory = (category) => {\n        let filteredCats = this.props.cocktailsApi.filter(cocktail => cocktail.category === category)\n        return filteredCats.map(tailObj => <CocktailItem name={tailObj.name} image_url={tailObj.image_url} cocktail={tailObj} id={tailObj.id} key={tailObj.id} />)\n    }\n    // let filtered = this.props.cocktailsApi.filter(el => this.checkCanMake(el, this.props.userIngApi) === false)\n    // let sorted = filtered.sort((a, b) => this.howManyIngs(a) - this.howManyIngs(b))\n    renderAllCocktails = () => {\n        if(this.state.currentCat) {\n            this.filterByCategory(this.state.currentCat)\n        }else {\n            let sorted = this.props.cocktailsApi.sort((a, b) => this.howManyIngs(a) - this.howManyIngs(b))\n            let searchArray = sorted.filter(cocktail => cocktail.name.toLowerCase().includes(this.state.searchValue.toLowerCase()))\n            // let filtered = searchArray.filter(cocktail => cocktail.category.includes(this.state.currentCat))\n            return searchArray.map(tailObj => <CocktailItem name={tailObj.name} image_url={tailObj.image_url} cocktail={tailObj} id={tailObj.id} key={tailObj.id} />)\n        }\n     }\n\n     renderMyCocktails = () => {\n        let filtered = this.props.cocktailsApi.filter(el => this.checkCanMake(el, this.props.userIngApi) === true)\n        return filtered.map(tailObj => <CocktailItem name={tailObj.name} image_url={tailObj.image_url} cocktail={tailObj} id={tailObj.id} key={tailObj.id} />)\n     }\n\n     howManyIngs = (cocktailObj) => {\n        let cocktail = cocktailObj.cocktail_ingredients\n        let ingNames = this.props.userIngApi.map(ingredient => ingredient.name)\n        let hasThis = cocktail.filter((ing) => ingNames.includes(ing.name))\n        return cocktail.length - hasThis.length\n    }\n    \n     checkCanMake(singleCockt, userIngApi) {\n         let cocktail = singleCockt.cocktail_ingredients\n         return cocktail.every(function(ing) {\n          return userIngApi.some(function(ing2) {\n             return (ing.name == ing2.name) && (ing.quantity <= ing2.quantity) \n           })\n         })\n     }\n    \n    render() {\n        return (\n            <> {this.props.cocktailsApi.length ? \n                <Container textAlign='center'>\n                    <Segment textAlign='center' basic padded='very' vertical>\n                        <h2 className='content-header'>Search by Name</h2>\n                        <CocktailSearch changeHandler={this.changeHandler} searchValue={this.state.searchValue} categoryHandler={this.categoryHandler} currentCat={this.state.currentCat} categoryOptions={this.state.categoryOptions} />\n                        {/* <FilterCocktails changeHandler={this.changeHandler} categoryHandler={this.categoryHandler} currentCat={this.state.currentCat} categoryOptions={this.state.categoryOptions} /> */}\n                    </Segment>\n                        <h2 className='content-header'>All Cocktails</h2>\n                        <Card.Group className='card-group' centered >\n                            {this.renderAllCocktails()}\n                        </Card.Group>\n                        <>\n                        <Divider horizontal></Divider>\n                        </>\n                        {/* <Item.Group relaxed divided>\n                            {this.renderAllCocktails()}\n                        </Item.Group> */}\n                        <h2 className='content-header'>Possible Cocktails</h2>\n                        <Card.Group className='card-group' centered >\n                            {this.renderMyCocktails()}\n                        </Card.Group>\n                </Container>\n                 : <Loading />}\n            </>\n        );\n    }\n}\n\n\nfunction mdp(dispatch){\n    return{\n        fetchUserIngredients: () => dispatch(getUserIngredients()),\n        fetchCocktails: () => dispatch(getCocktails())\n    }\n}\n\nfunction msp(state){\n    return {\n        currentUser: state.currentUser,\n        userIngApi: state.userIngApi,\n        cocktailsApi: state.cocktailsApi\n    }\n}\n\n\nexport default connect(msp, mdp)(AllCocktails);\n{/* <Dropdown\n    onChange={this.categoryHandler}\n    options={this.state.categoryOptions}\n    placeholder='Choose a Category'\n    selection\n    value={this.state.currentCat}\n/> */}","/Users/andrea/tendr/tendr-react-frontend/src/Containers/ShoppingListCont.js",[],"/Users/andrea/tendr/tendr-react-frontend/src/Components/SavedCocktailItem.js",["45","46"],"/Users/andrea/tendr/tendr-react-frontend/src/Components/SignUpForm.js",[],"/Users/andrea/tendr/tendr-react-frontend/src/Components/Ingredient.js",[],"/Users/andrea/tendr/tendr-react-frontend/src/Components/CocktailSearch.js",["47","48","49"],"import React from 'react';\nimport { Form, FormInput, Input, Dropdown } from 'semantic-ui-react'\n\nconst CocktailSearch = ({ searchValue, changeHandler, categoryHandler, currentCat, categoryOptions }) => {\n    return(\n        <div className='search-form'>\n            <Form >\n                <Form.Field>\n                    <label>Search by Name</label>\n                    <Form.Input type=\"text\" value={searchValue} onChange={changeHandler} placeholder=\"search by name\" />\n                </Form.Field>\n            </Form>\n            {/* <Form>\n\n                <Form.Field> */}\n                    <label>Filter by Category</label>\n                    <Dropdown \n                        onChange={categoryHandler, console.log(\"changing category\")}\n                        options={categoryOptions}\n                        selection\n                        value={currentCat}\n                        defaultValue=''\n                        />\n                {/* </Form.Field>\n            </Form> */}\n        </div>\n    ) \n\n}\n\nexport default CocktailSearch\n// placeholder='Choose a Category'\n// clearable\n// fluid\n// search","/Users/andrea/tendr/tendr-react-frontend/src/Components/FilterCocktails.js",["50","51","52"],{"ruleId":"53","severity":1,"message":"54","line":2,"column":19,"nodeType":"55","messageId":"56","endLine":2,"endColumn":24},{"ruleId":"53","severity":1,"message":"57","line":2,"column":52,"nodeType":"55","messageId":"56","endLine":2,"endColumn":60},{"ruleId":"53","severity":1,"message":"58","line":5,"column":8,"nodeType":"55","messageId":"56","endLine":5,"endColumn":23},{"ruleId":"59","severity":1,"message":"60","line":76,"column":31,"nodeType":"61","messageId":"62","endLine":76,"endColumn":33},{"ruleId":"63","severity":1,"message":"64","line":129,"column":1,"nodeType":"65","messageId":"66","endLine":135,"endColumn":7},{"ruleId":"53","severity":1,"message":"67","line":2,"column":24,"nodeType":"55","messageId":"56","endLine":2,"endColumn":28},{"ruleId":"53","severity":1,"message":"68","line":2,"column":30,"nodeType":"55","messageId":"56","endLine":2,"endColumn":35},{"ruleId":"53","severity":1,"message":"69","line":2,"column":16,"nodeType":"55","messageId":"56","endLine":2,"endColumn":25},{"ruleId":"53","severity":1,"message":"70","line":2,"column":27,"nodeType":"55","messageId":"56","endLine":2,"endColumn":32},{"ruleId":"71","severity":1,"message":"72","line":18,"column":50,"nodeType":"73","messageId":"74","endLine":18,"endColumn":51},{"ruleId":"53","severity":1,"message":"57","line":2,"column":10,"nodeType":"55","messageId":"56","endLine":2,"endColumn":18},{"ruleId":"53","severity":1,"message":"75","line":2,"column":20,"nodeType":"55","messageId":"56","endLine":2,"endColumn":24},{"ruleId":"53","severity":1,"message":"76","line":2,"column":26,"nodeType":"55","messageId":"56","endLine":2,"endColumn":33},"no-unused-vars","'Image' is defined but never used.","Identifier","unusedVar","'Dropdown' is defined but never used.","'FilterCocktails' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-lone-blocks","Block is redundant.","BlockStatement","redundantBlock","'Item' is defined but never used.","'Label' is defined but never used.","'FormInput' is defined but never used.","'Input' is defined but never used.","no-sequences","Unexpected use of comma operator.","SequenceExpression","unexpectedCommaExpression","'Grid' is defined but never used.","'Segment' is defined but never used."]